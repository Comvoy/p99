/* This file is automatically generated, do not change manually. */

/** @file                                                               
 ** @brief automatically generated macros to handle variadic macros.    
 **                                                                      
 ** You should probably never include this file directly but through     
 ** other P99 header files that define macros that are of direct use.  */

/** @brief The maximal number of arguments the P99 macros can handle.   
 **                                                                      
 ** This limit applies also to the integer arithmetic that is            
 ** performed by the macros in @ref preprocessor_arithmetic           */
#define P99_MAX_NUMBER 81

#define P99__ARG(\
	_1,	_2,	_3,	_4,	_5,	_6,	_7,	_8,\
	_9,	_10,	_11,	_12,	_13,	_14,	_15,	_16,\
	_17,	_18,	_19,	_20,	_21,	_22,	_23,	_24,\
	_25,	_26,	_27,	_28,	_29,	_30,	_31,	_32,\
	_33,	_34,	_35,	_36,	_37,	_38,	_39,	_40,\
	_41,	_42,	_43,	_44,	_45,	_46,	_47,	_48,\
	_49,	_50,	_51,	_52,	_53,	_54,	_55,	_56,\
	_57,	_58,	_59,	_60,	_61,	_62,	_63,	_64,\
	_65,	_66,	_67,	_68,	_69,	_70,	_71,	_72,\
	_73,	_74,	_75,	_76,	_77,	_78,	_79,	_80,\
	_81,\
	...) _81
#define P99__NARG_1(...) P99__ARG(__VA_ARGS__, 	80,\
	79,	78,	77,	76,	75,	74,	73,	72,\
	71,	70,	69,	68,	67,	66,	65,	64,\
	63,	62,	61,	60,	59,	58,	57,	56,\
	55,	54,	53,	52,	51,	50,	49,	48,\
	47,	46,	45,	44,	43,	42,	41,	40,\
	39,	38,	37,	36,	35,	34,	33,	32,\
	31,	30,	29,	28,	27,	26,	25,	24,\
	23,	22,	21,	20,	19,	18,	17,	16,\
	15,	14,	13,	12,	11,	10,	9,	8,\
	7,	6,	5,	4,	3,	2,	1,	0,)
#define P99__NARG_2(...) P99__ARG(__VA_ARGS__, 	40,\
	P99__INV(2),	39,	P99__INV(2),	38,	P99__INV(2),	37,	P99__INV(2),	36,\
	P99__INV(2),	35,	P99__INV(2),	34,	P99__INV(2),	33,	P99__INV(2),	32,\
	P99__INV(2),	31,	P99__INV(2),	30,	P99__INV(2),	29,	P99__INV(2),	28,\
	P99__INV(2),	27,	P99__INV(2),	26,	P99__INV(2),	25,	P99__INV(2),	24,\
	P99__INV(2),	23,	P99__INV(2),	22,	P99__INV(2),	21,	P99__INV(2),	20,\
	P99__INV(2),	19,	P99__INV(2),	18,	P99__INV(2),	17,	P99__INV(2),	16,\
	P99__INV(2),	15,	P99__INV(2),	14,	P99__INV(2),	13,	P99__INV(2),	12,\
	P99__INV(2),	11,	P99__INV(2),	10,	P99__INV(2),	9,	P99__INV(2),	8,\
	P99__INV(2),	7,	P99__INV(2),	6,	P99__INV(2),	5,	P99__INV(2),	4,\
	P99__INV(2),	3,	P99__INV(2),	2,	P99__INV(2),	1,	P99__INV(2),	0,)
#define P99__NARG_3(...) P99__ARG(__VA_ARGS__, 	P99__INV(3),\
	P99__INV(3),	26,	P99__INV(3),	P99__INV(3),	25,	P99__INV(3),	P99__INV(3),	24,\
	P99__INV(3),	P99__INV(3),	23,	P99__INV(3),	P99__INV(3),	22,	P99__INV(3),	P99__INV(3),\
	21,	P99__INV(3),	P99__INV(3),	20,	P99__INV(3),	P99__INV(3),	19,	P99__INV(3),\
	P99__INV(3),	18,	P99__INV(3),	P99__INV(3),	17,	P99__INV(3),	P99__INV(3),	16,\
	P99__INV(3),	P99__INV(3),	15,	P99__INV(3),	P99__INV(3),	14,	P99__INV(3),	P99__INV(3),\
	13,	P99__INV(3),	P99__INV(3),	12,	P99__INV(3),	P99__INV(3),	11,	P99__INV(3),\
	P99__INV(3),	10,	P99__INV(3),	P99__INV(3),	9,	P99__INV(3),	P99__INV(3),	8,\
	P99__INV(3),	P99__INV(3),	7,	P99__INV(3),	P99__INV(3),	6,	P99__INV(3),	P99__INV(3),\
	5,	P99__INV(3),	P99__INV(3),	4,	P99__INV(3),	P99__INV(3),	3,	P99__INV(3),\
	P99__INV(3),	2,	P99__INV(3),	P99__INV(3),	1,	P99__INV(3),	P99__INV(3),	0,)
#define P99__NARG_4(...) P99__ARG(__VA_ARGS__, 	20,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	19,	P99__INV(4),	P99__INV(4),	P99__INV(4),	18,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	17,	P99__INV(4),	P99__INV(4),	P99__INV(4),	16,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	15,	P99__INV(4),	P99__INV(4),	P99__INV(4),	14,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	13,	P99__INV(4),	P99__INV(4),	P99__INV(4),	12,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	11,	P99__INV(4),	P99__INV(4),	P99__INV(4),	10,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	9,	P99__INV(4),	P99__INV(4),	P99__INV(4),	8,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	7,	P99__INV(4),	P99__INV(4),	P99__INV(4),	6,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	5,	P99__INV(4),	P99__INV(4),	P99__INV(4),	4,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	3,	P99__INV(4),	P99__INV(4),	P99__INV(4),	2,\
	P99__INV(4),	P99__INV(4),	P99__INV(4),	1,	P99__INV(4),	P99__INV(4),	P99__INV(4),	0,)
/** @ingroup basic_list_operations                                                 */
/** @brief Determine of the argument list has a comma, i.e at least two arguments. */
#define P99_HAS_COMMA(...) P99__ARG(__VA_ARGS__,\
	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,	0, ...)
#define P99__SKP2(_0, ...) P99__SKP1(__VA_ARGS__)
#define P99__SKP3(_0, ...) P99__SKP2(__VA_ARGS__)
#define P99__SKP4(_0, ...) P99__SKP3(__VA_ARGS__)
#define P99__SKP5(_0, ...) P99__SKP4(__VA_ARGS__)
#define P99__SKP6(_0, ...) P99__SKP5(__VA_ARGS__)
#define P99__SKP7(_0, ...) P99__SKP6(__VA_ARGS__)
#define P99__SKP8(_0, ...) P99__SKP7(__VA_ARGS__)
#define P99__SKP9(_0, ...) P99__SKP8(__VA_ARGS__)
#define P99__SKP10(_0, ...) P99__SKP9(__VA_ARGS__)
#define P99__SKP11(_0, ...) P99__SKP10(__VA_ARGS__)
#define P99__SKP12(_0, ...) P99__SKP11(__VA_ARGS__)
#define P99__SKP13(_0, ...) P99__SKP12(__VA_ARGS__)
#define P99__SKP14(_0, ...) P99__SKP13(__VA_ARGS__)
#define P99__SKP15(_0, ...) P99__SKP14(__VA_ARGS__)
#define P99__SKP16(_0, ...) P99__SKP15(__VA_ARGS__)
#define P99__SKP17(_0, ...) P99__SKP16(__VA_ARGS__)
#define P99__SKP18(_0, ...) P99__SKP17(__VA_ARGS__)
#define P99__SKP19(_0, ...) P99__SKP18(__VA_ARGS__)
#define P99__SKP20(_0, ...) P99__SKP19(__VA_ARGS__)
#define P99__SKP21(_0, ...) P99__SKP20(__VA_ARGS__)
#define P99__SKP22(_0, ...) P99__SKP21(__VA_ARGS__)
#define P99__SKP23(_0, ...) P99__SKP22(__VA_ARGS__)
#define P99__SKP24(_0, ...) P99__SKP23(__VA_ARGS__)
#define P99__SKP25(_0, ...) P99__SKP24(__VA_ARGS__)
#define P99__SKP26(_0, ...) P99__SKP25(__VA_ARGS__)
#define P99__SKP27(_0, ...) P99__SKP26(__VA_ARGS__)
#define P99__SKP28(_0, ...) P99__SKP27(__VA_ARGS__)
#define P99__SKP29(_0, ...) P99__SKP28(__VA_ARGS__)
#define P99__SKP30(_0, ...) P99__SKP29(__VA_ARGS__)
#define P99__SKP31(_0, ...) P99__SKP30(__VA_ARGS__)
#define P99__SKP32(_0, ...) P99__SKP31(__VA_ARGS__)
#define P99__SKP33(_0, ...) P99__SKP32(__VA_ARGS__)
#define P99__SKP34(_0, ...) P99__SKP33(__VA_ARGS__)
#define P99__SKP35(_0, ...) P99__SKP34(__VA_ARGS__)
#define P99__SKP36(_0, ...) P99__SKP35(__VA_ARGS__)
#define P99__SKP37(_0, ...) P99__SKP36(__VA_ARGS__)
#define P99__SKP38(_0, ...) P99__SKP37(__VA_ARGS__)
#define P99__SKP39(_0, ...) P99__SKP38(__VA_ARGS__)
#define P99__SKP40(_0, ...) P99__SKP39(__VA_ARGS__)
#define P99__SKP41(_0, ...) P99__SKP40(__VA_ARGS__)
#define P99__SKP42(_0, ...) P99__SKP41(__VA_ARGS__)
#define P99__SKP43(_0, ...) P99__SKP42(__VA_ARGS__)
#define P99__SKP44(_0, ...) P99__SKP43(__VA_ARGS__)
#define P99__SKP45(_0, ...) P99__SKP44(__VA_ARGS__)
#define P99__SKP46(_0, ...) P99__SKP45(__VA_ARGS__)
#define P99__SKP47(_0, ...) P99__SKP46(__VA_ARGS__)
#define P99__SKP48(_0, ...) P99__SKP47(__VA_ARGS__)
#define P99__SKP49(_0, ...) P99__SKP48(__VA_ARGS__)
#define P99__SKP50(_0, ...) P99__SKP49(__VA_ARGS__)
#define P99__SKP51(_0, ...) P99__SKP50(__VA_ARGS__)
#define P99__SKP52(_0, ...) P99__SKP51(__VA_ARGS__)
#define P99__SKP53(_0, ...) P99__SKP52(__VA_ARGS__)
#define P99__SKP54(_0, ...) P99__SKP53(__VA_ARGS__)
#define P99__SKP55(_0, ...) P99__SKP54(__VA_ARGS__)
#define P99__SKP56(_0, ...) P99__SKP55(__VA_ARGS__)
#define P99__SKP57(_0, ...) P99__SKP56(__VA_ARGS__)
#define P99__SKP58(_0, ...) P99__SKP57(__VA_ARGS__)
#define P99__SKP59(_0, ...) P99__SKP58(__VA_ARGS__)
#define P99__SKP60(_0, ...) P99__SKP59(__VA_ARGS__)
#define P99__SKP61(_0, ...) P99__SKP60(__VA_ARGS__)
#define P99__SKP62(_0, ...) P99__SKP61(__VA_ARGS__)
#define P99__SKP63(_0, ...) P99__SKP62(__VA_ARGS__)
#define P99__SKP64(_0, ...) P99__SKP63(__VA_ARGS__)
#define P99__SKP65(_0, ...) P99__SKP64(__VA_ARGS__)
#define P99__SKP66(_0, ...) P99__SKP65(__VA_ARGS__)
#define P99__SKP67(_0, ...) P99__SKP66(__VA_ARGS__)
#define P99__SKP68(_0, ...) P99__SKP67(__VA_ARGS__)
#define P99__SKP69(_0, ...) P99__SKP68(__VA_ARGS__)
#define P99__SKP70(_0, ...) P99__SKP69(__VA_ARGS__)
#define P99__SKP71(_0, ...) P99__SKP70(__VA_ARGS__)
#define P99__SKP72(_0, ...) P99__SKP71(__VA_ARGS__)
#define P99__SKP73(_0, ...) P99__SKP72(__VA_ARGS__)
#define P99__SKP74(_0, ...) P99__SKP73(__VA_ARGS__)
#define P99__SKP75(_0, ...) P99__SKP74(__VA_ARGS__)
#define P99__SKP76(_0, ...) P99__SKP75(__VA_ARGS__)
#define P99__SKP77(_0, ...) P99__SKP76(__VA_ARGS__)
#define P99__SKP78(_0, ...) P99__SKP77(__VA_ARGS__)
#define P99__SKP79(_0, ...) P99__SKP78(__VA_ARGS__)
#define P99__SKP80(_0, ...) P99__SKP79(__VA_ARGS__)
#define P99__PRE2(_0, ...) _0, P99__PRE1(__VA_ARGS__)
#define P99__PRE3(_0, ...) _0, P99__PRE2(__VA_ARGS__)
#define P99__PRE4(_0, ...) _0, P99__PRE3(__VA_ARGS__)
#define P99__PRE5(_0, ...) _0, P99__PRE4(__VA_ARGS__)
#define P99__PRE6(_0, ...) _0, P99__PRE5(__VA_ARGS__)
#define P99__PRE7(_0, ...) _0, P99__PRE6(__VA_ARGS__)
#define P99__PRE8(_0, ...) _0, P99__PRE7(__VA_ARGS__)
#define P99__PRE9(_0, ...) _0, P99__PRE8(__VA_ARGS__)
#define P99__PRE10(_0, ...) _0, P99__PRE9(__VA_ARGS__)
#define P99__PRE11(_0, ...) _0, P99__PRE10(__VA_ARGS__)
#define P99__PRE12(_0, ...) _0, P99__PRE11(__VA_ARGS__)
#define P99__PRE13(_0, ...) _0, P99__PRE12(__VA_ARGS__)
#define P99__PRE14(_0, ...) _0, P99__PRE13(__VA_ARGS__)
#define P99__PRE15(_0, ...) _0, P99__PRE14(__VA_ARGS__)
#define P99__PRE16(_0, ...) _0, P99__PRE15(__VA_ARGS__)
#define P99__PRE17(_0, ...) _0, P99__PRE16(__VA_ARGS__)
#define P99__PRE18(_0, ...) _0, P99__PRE17(__VA_ARGS__)
#define P99__PRE19(_0, ...) _0, P99__PRE18(__VA_ARGS__)
#define P99__PRE20(_0, ...) _0, P99__PRE19(__VA_ARGS__)
#define P99__PRE21(_0, ...) _0, P99__PRE20(__VA_ARGS__)
#define P99__PRE22(_0, ...) _0, P99__PRE21(__VA_ARGS__)
#define P99__PRE23(_0, ...) _0, P99__PRE22(__VA_ARGS__)
#define P99__PRE24(_0, ...) _0, P99__PRE23(__VA_ARGS__)
#define P99__PRE25(_0, ...) _0, P99__PRE24(__VA_ARGS__)
#define P99__PRE26(_0, ...) _0, P99__PRE25(__VA_ARGS__)
#define P99__PRE27(_0, ...) _0, P99__PRE26(__VA_ARGS__)
#define P99__PRE28(_0, ...) _0, P99__PRE27(__VA_ARGS__)
#define P99__PRE29(_0, ...) _0, P99__PRE28(__VA_ARGS__)
#define P99__PRE30(_0, ...) _0, P99__PRE29(__VA_ARGS__)
#define P99__PRE31(_0, ...) _0, P99__PRE30(__VA_ARGS__)
#define P99__PRE32(_0, ...) _0, P99__PRE31(__VA_ARGS__)
#define P99__PRE33(_0, ...) _0, P99__PRE32(__VA_ARGS__)
#define P99__PRE34(_0, ...) _0, P99__PRE33(__VA_ARGS__)
#define P99__PRE35(_0, ...) _0, P99__PRE34(__VA_ARGS__)
#define P99__PRE36(_0, ...) _0, P99__PRE35(__VA_ARGS__)
#define P99__PRE37(_0, ...) _0, P99__PRE36(__VA_ARGS__)
#define P99__PRE38(_0, ...) _0, P99__PRE37(__VA_ARGS__)
#define P99__PRE39(_0, ...) _0, P99__PRE38(__VA_ARGS__)
#define P99__PRE40(_0, ...) _0, P99__PRE39(__VA_ARGS__)
#define P99__PRE41(_0, ...) _0, P99__PRE40(__VA_ARGS__)
#define P99__PRE42(_0, ...) _0, P99__PRE41(__VA_ARGS__)
#define P99__PRE43(_0, ...) _0, P99__PRE42(__VA_ARGS__)
#define P99__PRE44(_0, ...) _0, P99__PRE43(__VA_ARGS__)
#define P99__PRE45(_0, ...) _0, P99__PRE44(__VA_ARGS__)
#define P99__PRE46(_0, ...) _0, P99__PRE45(__VA_ARGS__)
#define P99__PRE47(_0, ...) _0, P99__PRE46(__VA_ARGS__)
#define P99__PRE48(_0, ...) _0, P99__PRE47(__VA_ARGS__)
#define P99__PRE49(_0, ...) _0, P99__PRE48(__VA_ARGS__)
#define P99__PRE50(_0, ...) _0, P99__PRE49(__VA_ARGS__)
#define P99__PRE51(_0, ...) _0, P99__PRE50(__VA_ARGS__)
#define P99__PRE52(_0, ...) _0, P99__PRE51(__VA_ARGS__)
#define P99__PRE53(_0, ...) _0, P99__PRE52(__VA_ARGS__)
#define P99__PRE54(_0, ...) _0, P99__PRE53(__VA_ARGS__)
#define P99__PRE55(_0, ...) _0, P99__PRE54(__VA_ARGS__)
#define P99__PRE56(_0, ...) _0, P99__PRE55(__VA_ARGS__)
#define P99__PRE57(_0, ...) _0, P99__PRE56(__VA_ARGS__)
#define P99__PRE58(_0, ...) _0, P99__PRE57(__VA_ARGS__)
#define P99__PRE59(_0, ...) _0, P99__PRE58(__VA_ARGS__)
#define P99__PRE60(_0, ...) _0, P99__PRE59(__VA_ARGS__)
#define P99__PRE61(_0, ...) _0, P99__PRE60(__VA_ARGS__)
#define P99__PRE62(_0, ...) _0, P99__PRE61(__VA_ARGS__)
#define P99__PRE63(_0, ...) _0, P99__PRE62(__VA_ARGS__)
#define P99__PRE64(_0, ...) _0, P99__PRE63(__VA_ARGS__)
#define P99__PRE65(_0, ...) _0, P99__PRE64(__VA_ARGS__)
#define P99__PRE66(_0, ...) _0, P99__PRE65(__VA_ARGS__)
#define P99__PRE67(_0, ...) _0, P99__PRE66(__VA_ARGS__)
#define P99__PRE68(_0, ...) _0, P99__PRE67(__VA_ARGS__)
#define P99__PRE69(_0, ...) _0, P99__PRE68(__VA_ARGS__)
#define P99__PRE70(_0, ...) _0, P99__PRE69(__VA_ARGS__)
#define P99__PRE71(_0, ...) _0, P99__PRE70(__VA_ARGS__)
#define P99__PRE72(_0, ...) _0, P99__PRE71(__VA_ARGS__)
#define P99__PRE73(_0, ...) _0, P99__PRE72(__VA_ARGS__)
#define P99__PRE74(_0, ...) _0, P99__PRE73(__VA_ARGS__)
#define P99__PRE75(_0, ...) _0, P99__PRE74(__VA_ARGS__)
#define P99__PRE76(_0, ...) _0, P99__PRE75(__VA_ARGS__)
#define P99__PRE77(_0, ...) _0, P99__PRE76(__VA_ARGS__)
#define P99__PRE78(_0, ...) _0, P99__PRE77(__VA_ARGS__)
#define P99__PRE79(_0, ...) _0, P99__PRE78(__VA_ARGS__)
#define P99__PRE80(_0, ...) _0, P99__PRE79(__VA_ARGS__)
#define P99__ASCENDING() \
	0,	1,	2,	3,	4,	5,	6,	7,\
	8,	9,	10,	11,	12,	13,	14,	15,\
	16,	17,	18,	19,	20,	21,	22,	23,\
	24,	25,	26,	27,	28,	29,	30,	31,\
	32,	33,	34,	35,	36,	37,	38,	39,\
	40,	41,	42,	43,	44,	45,	46,	47,\
	48,	49,	50,	51,	52,	53,	54,	55,\
	56,	57,	58,	59,	60,	61,	62,	63,\
	64,	65,	66,	67,	68,	69,	70,	71,\
	72,	73,	74,	75,	76,	77,	78,	79,\
	80,
#define P99__ALL_ZEROES() \
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,	0,	0,	0,	0,	0,	0,	0,\
	0,
#define P99__ALL_ONES() \
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,	1,	1,	1,	1,	1,	1,	1,\
	1,
/** @brief Paste 7 arguments at their boundary.*/
#define P99_PASTE7(...) P99__PASTE7(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE7(L, ...) P99_PASTE2(P99_PASTE6(__VA_ARGS__), L)
/** @brief Paste 8 arguments at their boundary.*/
#define P99_PASTE8(...) P99__PASTE8(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE8(L, ...) P99_PASTE2(P99_PASTE7(__VA_ARGS__), L)
/** @brief Paste 9 arguments at their boundary.*/
#define P99_PASTE9(...) P99__PASTE9(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE9(L, ...) P99_PASTE2(P99_PASTE8(__VA_ARGS__), L)
/** @brief Paste 10 arguments at their boundary.*/
#define P99_PASTE10(...) P99__PASTE10(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE10(L, ...) P99_PASTE2(P99_PASTE9(__VA_ARGS__), L)
/** @brief Paste 11 arguments at their boundary.*/
#define P99_PASTE11(...) P99__PASTE11(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE11(L, ...) P99_PASTE2(P99_PASTE10(__VA_ARGS__), L)
/** @brief Paste 12 arguments at their boundary.*/
#define P99_PASTE12(...) P99__PASTE12(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE12(L, ...) P99_PASTE2(P99_PASTE11(__VA_ARGS__), L)
/** @brief Paste 13 arguments at their boundary.*/
#define P99_PASTE13(...) P99__PASTE13(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE13(L, ...) P99_PASTE2(P99_PASTE12(__VA_ARGS__), L)
/** @brief Paste 14 arguments at their boundary.*/
#define P99_PASTE14(...) P99__PASTE14(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE14(L, ...) P99_PASTE2(P99_PASTE13(__VA_ARGS__), L)
/** @brief Paste 15 arguments at their boundary.*/
#define P99_PASTE15(...) P99__PASTE15(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE15(L, ...) P99_PASTE2(P99_PASTE14(__VA_ARGS__), L)
/** @brief Paste 16 arguments at their boundary.*/
#define P99_PASTE16(...) P99__PASTE16(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE16(L, ...) P99_PASTE2(P99_PASTE15(__VA_ARGS__), L)
/** @brief Paste 17 arguments at their boundary.*/
#define P99_PASTE17(...) P99__PASTE17(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE17(L, ...) P99_PASTE2(P99_PASTE16(__VA_ARGS__), L)
/** @brief Paste 18 arguments at their boundary.*/
#define P99_PASTE18(...) P99__PASTE18(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE18(L, ...) P99_PASTE2(P99_PASTE17(__VA_ARGS__), L)
/** @brief Paste 19 arguments at their boundary.*/
#define P99_PASTE19(...) P99__PASTE19(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE19(L, ...) P99_PASTE2(P99_PASTE18(__VA_ARGS__), L)
/** @brief Paste 20 arguments at their boundary.*/
#define P99_PASTE20(...) P99__PASTE20(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE20(L, ...) P99_PASTE2(P99_PASTE19(__VA_ARGS__), L)
/** @brief Paste 21 arguments at their boundary.*/
#define P99_PASTE21(...) P99__PASTE21(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE21(L, ...) P99_PASTE2(P99_PASTE20(__VA_ARGS__), L)
/** @brief Paste 22 arguments at their boundary.*/
#define P99_PASTE22(...) P99__PASTE22(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE22(L, ...) P99_PASTE2(P99_PASTE21(__VA_ARGS__), L)
/** @brief Paste 23 arguments at their boundary.*/
#define P99_PASTE23(...) P99__PASTE23(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE23(L, ...) P99_PASTE2(P99_PASTE22(__VA_ARGS__), L)
/** @brief Paste 24 arguments at their boundary.*/
#define P99_PASTE24(...) P99__PASTE24(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE24(L, ...) P99_PASTE2(P99_PASTE23(__VA_ARGS__), L)
/** @brief Paste 25 arguments at their boundary.*/
#define P99_PASTE25(...) P99__PASTE25(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE25(L, ...) P99_PASTE2(P99_PASTE24(__VA_ARGS__), L)
/** @brief Paste 26 arguments at their boundary.*/
#define P99_PASTE26(...) P99__PASTE26(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE26(L, ...) P99_PASTE2(P99_PASTE25(__VA_ARGS__), L)
/** @brief Paste 27 arguments at their boundary.*/
#define P99_PASTE27(...) P99__PASTE27(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE27(L, ...) P99_PASTE2(P99_PASTE26(__VA_ARGS__), L)
/** @brief Paste 28 arguments at their boundary.*/
#define P99_PASTE28(...) P99__PASTE28(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE28(L, ...) P99_PASTE2(P99_PASTE27(__VA_ARGS__), L)
/** @brief Paste 29 arguments at their boundary.*/
#define P99_PASTE29(...) P99__PASTE29(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE29(L, ...) P99_PASTE2(P99_PASTE28(__VA_ARGS__), L)
/** @brief Paste 30 arguments at their boundary.*/
#define P99_PASTE30(...) P99__PASTE30(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE30(L, ...) P99_PASTE2(P99_PASTE29(__VA_ARGS__), L)
/** @brief Paste 31 arguments at their boundary.*/
#define P99_PASTE31(...) P99__PASTE31(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE31(L, ...) P99_PASTE2(P99_PASTE30(__VA_ARGS__), L)
/** @brief Paste 32 arguments at their boundary.*/
#define P99_PASTE32(...) P99__PASTE32(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE32(L, ...) P99_PASTE2(P99_PASTE31(__VA_ARGS__), L)
/** @brief Paste 33 arguments at their boundary.*/
#define P99_PASTE33(...) P99__PASTE33(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE33(L, ...) P99_PASTE2(P99_PASTE32(__VA_ARGS__), L)
/** @brief Paste 34 arguments at their boundary.*/
#define P99_PASTE34(...) P99__PASTE34(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE34(L, ...) P99_PASTE2(P99_PASTE33(__VA_ARGS__), L)
/** @brief Paste 35 arguments at their boundary.*/
#define P99_PASTE35(...) P99__PASTE35(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE35(L, ...) P99_PASTE2(P99_PASTE34(__VA_ARGS__), L)
/** @brief Paste 36 arguments at their boundary.*/
#define P99_PASTE36(...) P99__PASTE36(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE36(L, ...) P99_PASTE2(P99_PASTE35(__VA_ARGS__), L)
/** @brief Paste 37 arguments at their boundary.*/
#define P99_PASTE37(...) P99__PASTE37(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE37(L, ...) P99_PASTE2(P99_PASTE36(__VA_ARGS__), L)
/** @brief Paste 38 arguments at their boundary.*/
#define P99_PASTE38(...) P99__PASTE38(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE38(L, ...) P99_PASTE2(P99_PASTE37(__VA_ARGS__), L)
/** @brief Paste 39 arguments at their boundary.*/
#define P99_PASTE39(...) P99__PASTE39(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE39(L, ...) P99_PASTE2(P99_PASTE38(__VA_ARGS__), L)
/** @brief Paste 40 arguments at their boundary.*/
#define P99_PASTE40(...) P99__PASTE40(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE40(L, ...) P99_PASTE2(P99_PASTE39(__VA_ARGS__), L)
/** @brief Paste 41 arguments at their boundary.*/
#define P99_PASTE41(...) P99__PASTE41(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE41(L, ...) P99_PASTE2(P99_PASTE40(__VA_ARGS__), L)
/** @brief Paste 42 arguments at their boundary.*/
#define P99_PASTE42(...) P99__PASTE42(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE42(L, ...) P99_PASTE2(P99_PASTE41(__VA_ARGS__), L)
/** @brief Paste 43 arguments at their boundary.*/
#define P99_PASTE43(...) P99__PASTE43(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE43(L, ...) P99_PASTE2(P99_PASTE42(__VA_ARGS__), L)
/** @brief Paste 44 arguments at their boundary.*/
#define P99_PASTE44(...) P99__PASTE44(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE44(L, ...) P99_PASTE2(P99_PASTE43(__VA_ARGS__), L)
/** @brief Paste 45 arguments at their boundary.*/
#define P99_PASTE45(...) P99__PASTE45(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE45(L, ...) P99_PASTE2(P99_PASTE44(__VA_ARGS__), L)
/** @brief Paste 46 arguments at their boundary.*/
#define P99_PASTE46(...) P99__PASTE46(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE46(L, ...) P99_PASTE2(P99_PASTE45(__VA_ARGS__), L)
/** @brief Paste 47 arguments at their boundary.*/
#define P99_PASTE47(...) P99__PASTE47(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE47(L, ...) P99_PASTE2(P99_PASTE46(__VA_ARGS__), L)
/** @brief Paste 48 arguments at their boundary.*/
#define P99_PASTE48(...) P99__PASTE48(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE48(L, ...) P99_PASTE2(P99_PASTE47(__VA_ARGS__), L)
/** @brief Paste 49 arguments at their boundary.*/
#define P99_PASTE49(...) P99__PASTE49(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE49(L, ...) P99_PASTE2(P99_PASTE48(__VA_ARGS__), L)
/** @brief Paste 50 arguments at their boundary.*/
#define P99_PASTE50(...) P99__PASTE50(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE50(L, ...) P99_PASTE2(P99_PASTE49(__VA_ARGS__), L)
/** @brief Paste 51 arguments at their boundary.*/
#define P99_PASTE51(...) P99__PASTE51(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE51(L, ...) P99_PASTE2(P99_PASTE50(__VA_ARGS__), L)
/** @brief Paste 52 arguments at their boundary.*/
#define P99_PASTE52(...) P99__PASTE52(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE52(L, ...) P99_PASTE2(P99_PASTE51(__VA_ARGS__), L)
/** @brief Paste 53 arguments at their boundary.*/
#define P99_PASTE53(...) P99__PASTE53(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE53(L, ...) P99_PASTE2(P99_PASTE52(__VA_ARGS__), L)
/** @brief Paste 54 arguments at their boundary.*/
#define P99_PASTE54(...) P99__PASTE54(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE54(L, ...) P99_PASTE2(P99_PASTE53(__VA_ARGS__), L)
/** @brief Paste 55 arguments at their boundary.*/
#define P99_PASTE55(...) P99__PASTE55(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE55(L, ...) P99_PASTE2(P99_PASTE54(__VA_ARGS__), L)
/** @brief Paste 56 arguments at their boundary.*/
#define P99_PASTE56(...) P99__PASTE56(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE56(L, ...) P99_PASTE2(P99_PASTE55(__VA_ARGS__), L)
/** @brief Paste 57 arguments at their boundary.*/
#define P99_PASTE57(...) P99__PASTE57(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE57(L, ...) P99_PASTE2(P99_PASTE56(__VA_ARGS__), L)
/** @brief Paste 58 arguments at their boundary.*/
#define P99_PASTE58(...) P99__PASTE58(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE58(L, ...) P99_PASTE2(P99_PASTE57(__VA_ARGS__), L)
/** @brief Paste 59 arguments at their boundary.*/
#define P99_PASTE59(...) P99__PASTE59(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE59(L, ...) P99_PASTE2(P99_PASTE58(__VA_ARGS__), L)
/** @brief Paste 60 arguments at their boundary.*/
#define P99_PASTE60(...) P99__PASTE60(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE60(L, ...) P99_PASTE2(P99_PASTE59(__VA_ARGS__), L)
/** @brief Paste 61 arguments at their boundary.*/
#define P99_PASTE61(...) P99__PASTE61(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE61(L, ...) P99_PASTE2(P99_PASTE60(__VA_ARGS__), L)
/** @brief Paste 62 arguments at their boundary.*/
#define P99_PASTE62(...) P99__PASTE62(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE62(L, ...) P99_PASTE2(P99_PASTE61(__VA_ARGS__), L)
/** @brief Paste 63 arguments at their boundary.*/
#define P99_PASTE63(...) P99__PASTE63(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE63(L, ...) P99_PASTE2(P99_PASTE62(__VA_ARGS__), L)
/** @brief Paste 64 arguments at their boundary.*/
#define P99_PASTE64(...) P99__PASTE64(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE64(L, ...) P99_PASTE2(P99_PASTE63(__VA_ARGS__), L)
/** @brief Paste 65 arguments at their boundary.*/
#define P99_PASTE65(...) P99__PASTE65(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE65(L, ...) P99_PASTE2(P99_PASTE64(__VA_ARGS__), L)
/** @brief Paste 66 arguments at their boundary.*/
#define P99_PASTE66(...) P99__PASTE66(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE66(L, ...) P99_PASTE2(P99_PASTE65(__VA_ARGS__), L)
/** @brief Paste 67 arguments at their boundary.*/
#define P99_PASTE67(...) P99__PASTE67(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE67(L, ...) P99_PASTE2(P99_PASTE66(__VA_ARGS__), L)
/** @brief Paste 68 arguments at their boundary.*/
#define P99_PASTE68(...) P99__PASTE68(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE68(L, ...) P99_PASTE2(P99_PASTE67(__VA_ARGS__), L)
/** @brief Paste 69 arguments at their boundary.*/
#define P99_PASTE69(...) P99__PASTE69(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE69(L, ...) P99_PASTE2(P99_PASTE68(__VA_ARGS__), L)
/** @brief Paste 70 arguments at their boundary.*/
#define P99_PASTE70(...) P99__PASTE70(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE70(L, ...) P99_PASTE2(P99_PASTE69(__VA_ARGS__), L)
/** @brief Paste 71 arguments at their boundary.*/
#define P99_PASTE71(...) P99__PASTE71(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE71(L, ...) P99_PASTE2(P99_PASTE70(__VA_ARGS__), L)
/** @brief Paste 72 arguments at their boundary.*/
#define P99_PASTE72(...) P99__PASTE72(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE72(L, ...) P99_PASTE2(P99_PASTE71(__VA_ARGS__), L)
/** @brief Paste 73 arguments at their boundary.*/
#define P99_PASTE73(...) P99__PASTE73(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE73(L, ...) P99_PASTE2(P99_PASTE72(__VA_ARGS__), L)
/** @brief Paste 74 arguments at their boundary.*/
#define P99_PASTE74(...) P99__PASTE74(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE74(L, ...) P99_PASTE2(P99_PASTE73(__VA_ARGS__), L)
/** @brief Paste 75 arguments at their boundary.*/
#define P99_PASTE75(...) P99__PASTE75(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE75(L, ...) P99_PASTE2(P99_PASTE74(__VA_ARGS__), L)
/** @brief Paste 76 arguments at their boundary.*/
#define P99_PASTE76(...) P99__PASTE76(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE76(L, ...) P99_PASTE2(P99_PASTE75(__VA_ARGS__), L)
/** @brief Paste 77 arguments at their boundary.*/
#define P99_PASTE77(...) P99__PASTE77(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE77(L, ...) P99_PASTE2(P99_PASTE76(__VA_ARGS__), L)
/** @brief Paste 78 arguments at their boundary.*/
#define P99_PASTE78(...) P99__PASTE78(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE78(L, ...) P99_PASTE2(P99_PASTE77(__VA_ARGS__), L)
/** @brief Paste 79 arguments at their boundary.*/
#define P99_PASTE79(...) P99__PASTE79(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE79(L, ...) P99_PASTE2(P99_PASTE78(__VA_ARGS__), L)
/** @brief Paste 80 arguments at their boundary.*/
#define P99_PASTE80(...) P99__PASTE80(P99_LAST(__VA_ARGS__), P99_ALLBUTLAST(__VA_ARGS__))
#define P99__PASTE80(L, ...) P99_PASTE2(P99_PASTE79(__VA_ARGS__), L)
/**
 ** @addtogroup preprocessor_text
 **
 ** @brief These macros allow the handling of small texts and tokens.
 **
 ** For the following tokens, the macro ::P99_TOK_EQ will work.
 ** - decimal numbers: 0 ... 81
 ** - keywords:
 **     @c _Bool
 **     @c _Complex
 **     @c _Imaginary
 **     @c auto
 **     @c break
 **     @c case
 **     @c char
 **     @c const
 **     @c continue
 **     @c default
 **     @c do
 **     @c double
 **     @c else
 **     @c enum
 **     @c extern
 **     @c float
 **     @c for
 **     @c goto
 **     @c if
 **     @c inline
 **     @c int
 **     @c long
 **     @c register
 **     @c restrict
 **     @c return
 **     @c short
 **     @c signed
 **     @c sizeof
 **     @c static
 **     @c struct
 **     @c switch
 **     @c typedef
 **     @c union
 **     @c unsigned
 **     @c void
 **     @c volatile
 **     @c while
 ** - typedefs:
 **     @c clock_t
 **     @c div_t
 **     @c double_t
 **     @c fenv_t
 **     @c fexcept_t
 **     @c float_t
 **     @c fpos_t
 **     @c imaxdiv_t
 **     @c int16_t
 **     @c int32_t
 **     @c int64_t
 **     @c int8_t
 **     @c intfast16_t
 **     @c intfast32_t
 **     @c intfast64_t
 **     @c intfast8_t
 **     @c intleast16_t
 **     @c intleast32_t
 **     @c intleast64_t
 **     @c intleast8_t
 **     @c intmax_t
 **     @c intptr_t
 **     @c ldiv_t
 **     @c lldiv_t
 **     @c mbstate_t
 **     @c off_t
 **     @c ptrdiff_t
 **     @c sig_atomic_t
 **     @c size_t
 **     @c ssize_t
 **     @c time_t
 **     @c uint16_t
 **     @c uint32_t
 **     @c uint64_t
 **     @c uint8_t
 **     @c uintfast16_t
 **     @c uintfast32_t
 **     @c uintfast64_t
 **     @c uintfast8_t
 **     @c uintleast16_t
 **     @c uintleast32_t
 **     @c uintleast64_t
 **     @c uintleast8_t
 **     @c uintmax_t
 **     @c uintptr_t
 **     @c wchar_t
 **     @c wctrans_t
 **     @c wctype_t
 **     @c wint_t
 ** - functions or functional macros:
 **     @c _Exit
 **     @c abort
 **     @c abs
 **     @c acos
 **     @c asctime
 **     @c asin
 **     @c assert
 **     @c atan
 **     @c atan2
 **     @c atexit
 **     @c atof
 **     @c atof
 **     @c atoi
 **     @c atol
 **     @c bsearch
 **     @c btowc
 **     @c cabs
 **     @c cacos
 **     @c cacosh
 **     @c calloc
 **     @c carg
 **     @c casin
 **     @c casinh
 **     @c catan
 **     @c catanh
 **     @c ccos
 **     @c ccosh
 **     @c ceil
 **     @c cexp
 **     @c cimag
 **     @c clearerr
 **     @c clock
 **     @c clog
 **     @c conj
 **     @c cos
 **     @c cosh
 **     @c cpow
 **     @c cproj
 **     @c creal
 **     @c csin
 **     @c csinh
 **     @c csqrt
 **     @c ctan
 **     @c ctanh
 **     @c ctime
 **     @c difftime
 **     @c div
 **     @c exit
 **     @c exp
 **     @c fabs
 **     @c fclose
 **     @c fdopen
 **     @c feof
 **     @c ferror
 **     @c fflush
 **     @c fgetc
 **     @c fgetpos
 **     @c fgets
 **     @c fgetwc
 **     @c fgetws
 **     @c floor
 **     @c fopen
 **     @c fprintf
 **     @c fprintf
 **     @c fputc
 **     @c fputchar
 **     @c fputs
 **     @c fputwc
 **     @c fputws
 **     @c fread
 **     @c free
 **     @c freopen
 **     @c frexp
 **     @c fscanf
 **     @c fscanf
 **     @c fseek
 **     @c fsetpos
 **     @c ftell
 **     @c fwide
 **     @c fwprintf
 **     @c fwrite
 **     @c fwscanf
 **     @c getaddrinfo
 **     @c getc
 **     @c getchar
 **     @c getenv
 **     @c getnameinfo
 **     @c gets
 **     @c getwc
 **     @c getwchar
 **     @c gmtime
 **     @c imaxabs
 **     @c imaxdiv
 **     @c isalnum
 **     @c isalpha
 **     @c isblank
 **     @c iscntrl
 **     @c isdigit
 **     @c isgraph
 **     @c islower
 **     @c isprint
 **     @c ispunct
 **     @c isspace
 **     @c isupper
 **     @c iswalnum
 **     @c iswalpha
 **     @c iswcntrl
 **     @c iswctype
 **     @c iswdigit
 **     @c iswgraph
 **     @c iswlower
 **     @c iswprint
 **     @c iswpunct
 **     @c iswspace
 **     @c iswupper
 **     @c iswxdigit
 **     @c isxdigit
 **     @c labs
 **     @c ldexp
 **     @c ldiv
 **     @c ldiv
 **     @c localeconv
 **     @c localtime
 **     @c log
 **     @c log10
 **     @c longjmp
 **     @c malloc
 **     @c mbrlen
 **     @c mbrtowc
 **     @c mbsinit
 **     @c mbsrtowcs
 **     @c memchr
 **     @c memcmp
 **     @c memcpy
 **     @c memmove
 **     @c memset
 **     @c mktime
 **     @c modf
 **     @c offsetof
 **     @c perror
 **     @c pow
 **     @c printf
 **     @c putc
 **     @c putchar
 **     @c puts
 **     @c putwc
 **     @c putwchar
 **     @c qsort
 **     @c raise
 **     @c rand
 **     @c realloc
 **     @c remove
 **     @c rename
 **     @c rewind
 **     @c scanf
 **     @c setbuf
 **     @c setjmp
 **     @c setlocale
 **     @c setvbuf
 **     @c sin
 **     @c sinh
 **     @c snprintf
 **     @c sprintf
 **     @c sqrt
 **     @c srand
 **     @c sscanf
 **     @c strcat
 **     @c strchr
 **     @c strcmp
 **     @c strcoll
 **     @c strcpy
 **     @c strcspn
 **     @c strerror
 **     @c strftime
 **     @c strlen
 **     @c strncat
 **     @c strncmp
 **     @c strncpy
 **     @c strpbrk
 **     @c strrchr
 **     @c strspn
 **     @c strstr
 **     @c strtod
 **     @c strtoimax
 **     @c strtok
 **     @c strtol
 **     @c strtoul
 **     @c strtoumax
 **     @c strxfrm
 **     @c swprintf
 **     @c swscanf
 **     @c system
 **     @c tan
 **     @c tanh
 **     @c time
 **     @c tmpfile
 **     @c tmpnam
 **     @c tolower
 **     @c toupper
 **     @c towctrans
 **     @c towlower
 **     @c towupper
 **     @c ungetc
 **     @c ungetwc
 **     @c va_arg
 **     @c va_copy
 **     @c va_end
 **     @c va_start
 **     @c vfprintf
 **     @c vfscanf
 **     @c vfwprintf
 **     @c vprintf
 **     @c vscanf
 **     @c vsprintf
 **     @c vsscanf
 **     @c vswprintf
 **     @c vwprintf
 **     @c wcrtomb
 **     @c wcscat
 **     @c wcschr
 **     @c wcscmp
 **     @c wcscoll
 **     @c wcscpy
 **     @c wcscspn
 **     @c wcsftime
 **     @c wcslen
 **     @c wcsncat
 **     @c wcsncmp
 **     @c wcsncpy
 **     @c wcspbrk
 **     @c wcsrchr
 **     @c wcsrtombs
 **     @c wcsspn
 **     @c wcsstr
 **     @c wcstod
 **     @c wcstoimax
 **     @c wcstok
 **     @c wcstol
 **     @c wcstoul
 **     @c wcstoumax
 **     @c wcsxfrm
 **     @c wctob
 **     @c wctrans
 **     @c wctype
 **     @c wmemchr
 **     @c wmemcmp
 **     @c wmemcpy
 **     @c wmemmove
 **     @c wmemset
 **     @c wprintf
 **     @c wscanf
 **
 ** @warning Non-functional macros cannot be captured by this mechanism since they will
 ** be expanded before we may actually handle them. This concerns in particular
 ** the following tokens that are defined to be macros:
 **     @c NULL
 **     @c and
 **     @c and_eq
 **     @c bitand
 **     @c bitor
 **     @c bool
 **     @c compl
 **     @c false
 **     @c not
 **     @c not_eq
 **     @c offsetof
 **     @c or
 **     @c or_eq
 **     @c true
 **     @c xor
 **     @c xor_eq
 ** @{
 **/
#define P99__IS_0_EQ_0(...) ,
#define P99__IS_1_EQ_1(...) ,
#define P99__IS_2_EQ_2(...) ,
#define P99__IS_3_EQ_3(...) ,
#define P99__IS_4_EQ_4(...) ,
#define P99__IS_5_EQ_5(...) ,
#define P99__IS_6_EQ_6(...) ,
#define P99__IS_7_EQ_7(...) ,
#define P99__IS_8_EQ_8(...) ,
#define P99__IS_9_EQ_9(...) ,
#define P99__IS_10_EQ_10(...) ,
#define P99__IS_11_EQ_11(...) ,
#define P99__IS_12_EQ_12(...) ,
#define P99__IS_13_EQ_13(...) ,
#define P99__IS_14_EQ_14(...) ,
#define P99__IS_15_EQ_15(...) ,
#define P99__IS_16_EQ_16(...) ,
#define P99__IS_17_EQ_17(...) ,
#define P99__IS_18_EQ_18(...) ,
#define P99__IS_19_EQ_19(...) ,
#define P99__IS_20_EQ_20(...) ,
#define P99__IS_21_EQ_21(...) ,
#define P99__IS_22_EQ_22(...) ,
#define P99__IS_23_EQ_23(...) ,
#define P99__IS_24_EQ_24(...) ,
#define P99__IS_25_EQ_25(...) ,
#define P99__IS_26_EQ_26(...) ,
#define P99__IS_27_EQ_27(...) ,
#define P99__IS_28_EQ_28(...) ,
#define P99__IS_29_EQ_29(...) ,
#define P99__IS_30_EQ_30(...) ,
#define P99__IS_31_EQ_31(...) ,
#define P99__IS_32_EQ_32(...) ,
#define P99__IS_33_EQ_33(...) ,
#define P99__IS_34_EQ_34(...) ,
#define P99__IS_35_EQ_35(...) ,
#define P99__IS_36_EQ_36(...) ,
#define P99__IS_37_EQ_37(...) ,
#define P99__IS_38_EQ_38(...) ,
#define P99__IS_39_EQ_39(...) ,
#define P99__IS_40_EQ_40(...) ,
#define P99__IS_41_EQ_41(...) ,
#define P99__IS_42_EQ_42(...) ,
#define P99__IS_43_EQ_43(...) ,
#define P99__IS_44_EQ_44(...) ,
#define P99__IS_45_EQ_45(...) ,
#define P99__IS_46_EQ_46(...) ,
#define P99__IS_47_EQ_47(...) ,
#define P99__IS_48_EQ_48(...) ,
#define P99__IS_49_EQ_49(...) ,
#define P99__IS_50_EQ_50(...) ,
#define P99__IS_51_EQ_51(...) ,
#define P99__IS_52_EQ_52(...) ,
#define P99__IS_53_EQ_53(...) ,
#define P99__IS_54_EQ_54(...) ,
#define P99__IS_55_EQ_55(...) ,
#define P99__IS_56_EQ_56(...) ,
#define P99__IS_57_EQ_57(...) ,
#define P99__IS_58_EQ_58(...) ,
#define P99__IS_59_EQ_59(...) ,
#define P99__IS_60_EQ_60(...) ,
#define P99__IS_61_EQ_61(...) ,
#define P99__IS_62_EQ_62(...) ,
#define P99__IS_63_EQ_63(...) ,
#define P99__IS_64_EQ_64(...) ,
#define P99__IS_65_EQ_65(...) ,
#define P99__IS_66_EQ_66(...) ,
#define P99__IS_67_EQ_67(...) ,
#define P99__IS_68_EQ_68(...) ,
#define P99__IS_69_EQ_69(...) ,
#define P99__IS_70_EQ_70(...) ,
#define P99__IS_71_EQ_71(...) ,
#define P99__IS_72_EQ_72(...) ,
#define P99__IS_73_EQ_73(...) ,
#define P99__IS_74_EQ_74(...) ,
#define P99__IS_75_EQ_75(...) ,
#define P99__IS_76_EQ_76(...) ,
#define P99__IS_77_EQ_77(...) ,
#define P99__IS_78_EQ_78(...) ,
#define P99__IS_79_EQ_79(...) ,
#define P99__IS_80_EQ_80(...) ,
#define P99__IS_81_EQ_81(...) ,
#define P99__IS__Bool_EQ__Bool(...) ,
#define P99__IS__Complex_EQ__Complex(...) ,
#define P99__IS__Exit_EQ__Exit(...) ,
#define P99__IS__Imaginary_EQ__Imaginary(...) ,
#define P99__IS_abort_EQ_abort(...) ,
#define P99__IS_abs_EQ_abs(...) ,
#define P99__IS_acos_EQ_acos(...) ,
#define P99__IS_asctime_EQ_asctime(...) ,
#define P99__IS_asin_EQ_asin(...) ,
#define P99__IS_assert_EQ_assert(...) ,
#define P99__IS_atan_EQ_atan(...) ,
#define P99__IS_atan2_EQ_atan2(...) ,
#define P99__IS_atexit_EQ_atexit(...) ,
#define P99__IS_atof_EQ_atof(...) ,
#define P99__IS_atof_EQ_atof(...) ,
#define P99__IS_atoi_EQ_atoi(...) ,
#define P99__IS_atol_EQ_atol(...) ,
#define P99__IS_auto_EQ_auto(...) ,
#define P99__IS_break_EQ_break(...) ,
#define P99__IS_bsearch_EQ_bsearch(...) ,
#define P99__IS_btowc_EQ_btowc(...) ,
#define P99__IS_cabs_EQ_cabs(...) ,
#define P99__IS_cacos_EQ_cacos(...) ,
#define P99__IS_cacosh_EQ_cacosh(...) ,
#define P99__IS_calloc_EQ_calloc(...) ,
#define P99__IS_carg_EQ_carg(...) ,
#define P99__IS_case_EQ_case(...) ,
#define P99__IS_casin_EQ_casin(...) ,
#define P99__IS_casinh_EQ_casinh(...) ,
#define P99__IS_catan_EQ_catan(...) ,
#define P99__IS_catanh_EQ_catanh(...) ,
#define P99__IS_ccos_EQ_ccos(...) ,
#define P99__IS_ccosh_EQ_ccosh(...) ,
#define P99__IS_ceil_EQ_ceil(...) ,
#define P99__IS_cexp_EQ_cexp(...) ,
#define P99__IS_char_EQ_char(...) ,
#define P99__IS_cimag_EQ_cimag(...) ,
#define P99__IS_clearerr_EQ_clearerr(...) ,
#define P99__IS_clock_EQ_clock(...) ,
#define P99__IS_clock_t_EQ_clock_t(...) ,
#define P99__IS_clog_EQ_clog(...) ,
#define P99__IS_conj_EQ_conj(...) ,
#define P99__IS_const_EQ_const(...) ,
#define P99__IS_continue_EQ_continue(...) ,
#define P99__IS_cos_EQ_cos(...) ,
#define P99__IS_cosh_EQ_cosh(...) ,
#define P99__IS_cpow_EQ_cpow(...) ,
#define P99__IS_cproj_EQ_cproj(...) ,
#define P99__IS_creal_EQ_creal(...) ,
#define P99__IS_csin_EQ_csin(...) ,
#define P99__IS_csinh_EQ_csinh(...) ,
#define P99__IS_csqrt_EQ_csqrt(...) ,
#define P99__IS_ctan_EQ_ctan(...) ,
#define P99__IS_ctanh_EQ_ctanh(...) ,
#define P99__IS_ctime_EQ_ctime(...) ,
#define P99__IS_default_EQ_default(...) ,
#define P99__IS_difftime_EQ_difftime(...) ,
#define P99__IS_div_EQ_div(...) ,
#define P99__IS_div_t_EQ_div_t(...) ,
#define P99__IS_do_EQ_do(...) ,
#define P99__IS_double_EQ_double(...) ,
#define P99__IS_double_t_EQ_double_t(...) ,
#define P99__IS_else_EQ_else(...) ,
#define P99__IS_enum_EQ_enum(...) ,
#define P99__IS_exit_EQ_exit(...) ,
#define P99__IS_exp_EQ_exp(...) ,
#define P99__IS_extern_EQ_extern(...) ,
#define P99__IS_fabs_EQ_fabs(...) ,
#define P99__IS_fclose_EQ_fclose(...) ,
#define P99__IS_fdopen_EQ_fdopen(...) ,
#define P99__IS_fenv_t_EQ_fenv_t(...) ,
#define P99__IS_feof_EQ_feof(...) ,
#define P99__IS_ferror_EQ_ferror(...) ,
#define P99__IS_fexcept_t_EQ_fexcept_t(...) ,
#define P99__IS_fflush_EQ_fflush(...) ,
#define P99__IS_fgetc_EQ_fgetc(...) ,
#define P99__IS_fgetpos_EQ_fgetpos(...) ,
#define P99__IS_fgets_EQ_fgets(...) ,
#define P99__IS_fgetwc_EQ_fgetwc(...) ,
#define P99__IS_fgetws_EQ_fgetws(...) ,
#define P99__IS_float_EQ_float(...) ,
#define P99__IS_float_t_EQ_float_t(...) ,
#define P99__IS_floor_EQ_floor(...) ,
#define P99__IS_fopen_EQ_fopen(...) ,
#define P99__IS_for_EQ_for(...) ,
#define P99__IS_fpos_t_EQ_fpos_t(...) ,
#define P99__IS_fprintf_EQ_fprintf(...) ,
#define P99__IS_fprintf_EQ_fprintf(...) ,
#define P99__IS_fputc_EQ_fputc(...) ,
#define P99__IS_fputchar_EQ_fputchar(...) ,
#define P99__IS_fputs_EQ_fputs(...) ,
#define P99__IS_fputwc_EQ_fputwc(...) ,
#define P99__IS_fputws_EQ_fputws(...) ,
#define P99__IS_fread_EQ_fread(...) ,
#define P99__IS_free_EQ_free(...) ,
#define P99__IS_freopen_EQ_freopen(...) ,
#define P99__IS_frexp_EQ_frexp(...) ,
#define P99__IS_fscanf_EQ_fscanf(...) ,
#define P99__IS_fscanf_EQ_fscanf(...) ,
#define P99__IS_fseek_EQ_fseek(...) ,
#define P99__IS_fsetpos_EQ_fsetpos(...) ,
#define P99__IS_ftell_EQ_ftell(...) ,
#define P99__IS_fwide_EQ_fwide(...) ,
#define P99__IS_fwprintf_EQ_fwprintf(...) ,
#define P99__IS_fwrite_EQ_fwrite(...) ,
#define P99__IS_fwscanf_EQ_fwscanf(...) ,
#define P99__IS_getaddrinfo_EQ_getaddrinfo(...) ,
#define P99__IS_getc_EQ_getc(...) ,
#define P99__IS_getchar_EQ_getchar(...) ,
#define P99__IS_getenv_EQ_getenv(...) ,
#define P99__IS_getnameinfo_EQ_getnameinfo(...) ,
#define P99__IS_gets_EQ_gets(...) ,
#define P99__IS_getwc_EQ_getwc(...) ,
#define P99__IS_getwchar_EQ_getwchar(...) ,
#define P99__IS_gmtime_EQ_gmtime(...) ,
#define P99__IS_goto_EQ_goto(...) ,
#define P99__IS_if_EQ_if(...) ,
#define P99__IS_imaxabs_EQ_imaxabs(...) ,
#define P99__IS_imaxdiv_EQ_imaxdiv(...) ,
#define P99__IS_imaxdiv_t_EQ_imaxdiv_t(...) ,
#define P99__IS_inline_EQ_inline(...) ,
#define P99__IS_int_EQ_int(...) ,
#define P99__IS_int16_t_EQ_int16_t(...) ,
#define P99__IS_int32_t_EQ_int32_t(...) ,
#define P99__IS_int64_t_EQ_int64_t(...) ,
#define P99__IS_int8_t_EQ_int8_t(...) ,
#define P99__IS_intfast16_t_EQ_intfast16_t(...) ,
#define P99__IS_intfast32_t_EQ_intfast32_t(...) ,
#define P99__IS_intfast64_t_EQ_intfast64_t(...) ,
#define P99__IS_intfast8_t_EQ_intfast8_t(...) ,
#define P99__IS_intleast16_t_EQ_intleast16_t(...) ,
#define P99__IS_intleast32_t_EQ_intleast32_t(...) ,
#define P99__IS_intleast64_t_EQ_intleast64_t(...) ,
#define P99__IS_intleast8_t_EQ_intleast8_t(...) ,
#define P99__IS_intmax_t_EQ_intmax_t(...) ,
#define P99__IS_intptr_t_EQ_intptr_t(...) ,
#define P99__IS_isalnum_EQ_isalnum(...) ,
#define P99__IS_isalpha_EQ_isalpha(...) ,
#define P99__IS_isblank_EQ_isblank(...) ,
#define P99__IS_iscntrl_EQ_iscntrl(...) ,
#define P99__IS_isdigit_EQ_isdigit(...) ,
#define P99__IS_isgraph_EQ_isgraph(...) ,
#define P99__IS_islower_EQ_islower(...) ,
#define P99__IS_isprint_EQ_isprint(...) ,
#define P99__IS_ispunct_EQ_ispunct(...) ,
#define P99__IS_isspace_EQ_isspace(...) ,
#define P99__IS_isupper_EQ_isupper(...) ,
#define P99__IS_iswalnum_EQ_iswalnum(...) ,
#define P99__IS_iswalpha_EQ_iswalpha(...) ,
#define P99__IS_iswcntrl_EQ_iswcntrl(...) ,
#define P99__IS_iswctype_EQ_iswctype(...) ,
#define P99__IS_iswdigit_EQ_iswdigit(...) ,
#define P99__IS_iswgraph_EQ_iswgraph(...) ,
#define P99__IS_iswlower_EQ_iswlower(...) ,
#define P99__IS_iswprint_EQ_iswprint(...) ,
#define P99__IS_iswpunct_EQ_iswpunct(...) ,
#define P99__IS_iswspace_EQ_iswspace(...) ,
#define P99__IS_iswupper_EQ_iswupper(...) ,
#define P99__IS_iswxdigit_EQ_iswxdigit(...) ,
#define P99__IS_isxdigit_EQ_isxdigit(...) ,
#define P99__IS_labs_EQ_labs(...) ,
#define P99__IS_ldexp_EQ_ldexp(...) ,
#define P99__IS_ldiv_EQ_ldiv(...) ,
#define P99__IS_ldiv_EQ_ldiv(...) ,
#define P99__IS_ldiv_t_EQ_ldiv_t(...) ,
#define P99__IS_lldiv_t_EQ_lldiv_t(...) ,
#define P99__IS_localeconv_EQ_localeconv(...) ,
#define P99__IS_localtime_EQ_localtime(...) ,
#define P99__IS_log_EQ_log(...) ,
#define P99__IS_log10_EQ_log10(...) ,
#define P99__IS_long_EQ_long(...) ,
#define P99__IS_longjmp_EQ_longjmp(...) ,
#define P99__IS_malloc_EQ_malloc(...) ,
#define P99__IS_mbrlen_EQ_mbrlen(...) ,
#define P99__IS_mbrtowc_EQ_mbrtowc(...) ,
#define P99__IS_mbsinit_EQ_mbsinit(...) ,
#define P99__IS_mbsrtowcs_EQ_mbsrtowcs(...) ,
#define P99__IS_mbstate_t_EQ_mbstate_t(...) ,
#define P99__IS_memchr_EQ_memchr(...) ,
#define P99__IS_memcmp_EQ_memcmp(...) ,
#define P99__IS_memcpy_EQ_memcpy(...) ,
#define P99__IS_memmove_EQ_memmove(...) ,
#define P99__IS_memset_EQ_memset(...) ,
#define P99__IS_mktime_EQ_mktime(...) ,
#define P99__IS_modf_EQ_modf(...) ,
#define P99__IS_off_t_EQ_off_t(...) ,
#define P99__IS_offsetof_EQ_offsetof(...) ,
#define P99__IS_perror_EQ_perror(...) ,
#define P99__IS_pow_EQ_pow(...) ,
#define P99__IS_printf_EQ_printf(...) ,
#define P99__IS_ptrdiff_t_EQ_ptrdiff_t(...) ,
#define P99__IS_putc_EQ_putc(...) ,
#define P99__IS_putchar_EQ_putchar(...) ,
#define P99__IS_puts_EQ_puts(...) ,
#define P99__IS_putwc_EQ_putwc(...) ,
#define P99__IS_putwchar_EQ_putwchar(...) ,
#define P99__IS_qsort_EQ_qsort(...) ,
#define P99__IS_raise_EQ_raise(...) ,
#define P99__IS_rand_EQ_rand(...) ,
#define P99__IS_realloc_EQ_realloc(...) ,
#define P99__IS_register_EQ_register(...) ,
#define P99__IS_remove_EQ_remove(...) ,
#define P99__IS_rename_EQ_rename(...) ,
#define P99__IS_restrict_EQ_restrict(...) ,
#define P99__IS_return_EQ_return(...) ,
#define P99__IS_rewind_EQ_rewind(...) ,
#define P99__IS_scanf_EQ_scanf(...) ,
#define P99__IS_setbuf_EQ_setbuf(...) ,
#define P99__IS_setjmp_EQ_setjmp(...) ,
#define P99__IS_setlocale_EQ_setlocale(...) ,
#define P99__IS_setvbuf_EQ_setvbuf(...) ,
#define P99__IS_short_EQ_short(...) ,
#define P99__IS_sig_atomic_t_EQ_sig_atomic_t(...) ,
#define P99__IS_signed_EQ_signed(...) ,
#define P99__IS_sin_EQ_sin(...) ,
#define P99__IS_sinh_EQ_sinh(...) ,
#define P99__IS_size_t_EQ_size_t(...) ,
#define P99__IS_sizeof_EQ_sizeof(...) ,
#define P99__IS_snprintf_EQ_snprintf(...) ,
#define P99__IS_sprintf_EQ_sprintf(...) ,
#define P99__IS_sqrt_EQ_sqrt(...) ,
#define P99__IS_srand_EQ_srand(...) ,
#define P99__IS_sscanf_EQ_sscanf(...) ,
#define P99__IS_ssize_t_EQ_ssize_t(...) ,
#define P99__IS_static_EQ_static(...) ,
#define P99__IS_strcat_EQ_strcat(...) ,
#define P99__IS_strchr_EQ_strchr(...) ,
#define P99__IS_strcmp_EQ_strcmp(...) ,
#define P99__IS_strcoll_EQ_strcoll(...) ,
#define P99__IS_strcpy_EQ_strcpy(...) ,
#define P99__IS_strcspn_EQ_strcspn(...) ,
#define P99__IS_strerror_EQ_strerror(...) ,
#define P99__IS_strftime_EQ_strftime(...) ,
#define P99__IS_strlen_EQ_strlen(...) ,
#define P99__IS_strncat_EQ_strncat(...) ,
#define P99__IS_strncmp_EQ_strncmp(...) ,
#define P99__IS_strncpy_EQ_strncpy(...) ,
#define P99__IS_strpbrk_EQ_strpbrk(...) ,
#define P99__IS_strrchr_EQ_strrchr(...) ,
#define P99__IS_strspn_EQ_strspn(...) ,
#define P99__IS_strstr_EQ_strstr(...) ,
#define P99__IS_strtod_EQ_strtod(...) ,
#define P99__IS_strtoimax_EQ_strtoimax(...) ,
#define P99__IS_strtok_EQ_strtok(...) ,
#define P99__IS_strtol_EQ_strtol(...) ,
#define P99__IS_strtoul_EQ_strtoul(...) ,
#define P99__IS_strtoumax_EQ_strtoumax(...) ,
#define P99__IS_struct_EQ_struct(...) ,
#define P99__IS_strxfrm_EQ_strxfrm(...) ,
#define P99__IS_switch_EQ_switch(...) ,
#define P99__IS_swprintf_EQ_swprintf(...) ,
#define P99__IS_swscanf_EQ_swscanf(...) ,
#define P99__IS_system_EQ_system(...) ,
#define P99__IS_tan_EQ_tan(...) ,
#define P99__IS_tanh_EQ_tanh(...) ,
#define P99__IS_time_EQ_time(...) ,
#define P99__IS_time_t_EQ_time_t(...) ,
#define P99__IS_tmpfile_EQ_tmpfile(...) ,
#define P99__IS_tmpnam_EQ_tmpnam(...) ,
#define P99__IS_tolower_EQ_tolower(...) ,
#define P99__IS_toupper_EQ_toupper(...) ,
#define P99__IS_towctrans_EQ_towctrans(...) ,
#define P99__IS_towlower_EQ_towlower(...) ,
#define P99__IS_towupper_EQ_towupper(...) ,
#define P99__IS_typedef_EQ_typedef(...) ,
#define P99__IS_uint16_t_EQ_uint16_t(...) ,
#define P99__IS_uint32_t_EQ_uint32_t(...) ,
#define P99__IS_uint64_t_EQ_uint64_t(...) ,
#define P99__IS_uint8_t_EQ_uint8_t(...) ,
#define P99__IS_uintfast16_t_EQ_uintfast16_t(...) ,
#define P99__IS_uintfast32_t_EQ_uintfast32_t(...) ,
#define P99__IS_uintfast64_t_EQ_uintfast64_t(...) ,
#define P99__IS_uintfast8_t_EQ_uintfast8_t(...) ,
#define P99__IS_uintleast16_t_EQ_uintleast16_t(...) ,
#define P99__IS_uintleast32_t_EQ_uintleast32_t(...) ,
#define P99__IS_uintleast64_t_EQ_uintleast64_t(...) ,
#define P99__IS_uintleast8_t_EQ_uintleast8_t(...) ,
#define P99__IS_uintmax_t_EQ_uintmax_t(...) ,
#define P99__IS_uintptr_t_EQ_uintptr_t(...) ,
#define P99__IS_ungetc_EQ_ungetc(...) ,
#define P99__IS_ungetwc_EQ_ungetwc(...) ,
#define P99__IS_union_EQ_union(...) ,
#define P99__IS_unsigned_EQ_unsigned(...) ,
#define P99__IS_va_arg_EQ_va_arg(...) ,
#define P99__IS_va_copy_EQ_va_copy(...) ,
#define P99__IS_va_end_EQ_va_end(...) ,
#define P99__IS_va_start_EQ_va_start(...) ,
#define P99__IS_vfprintf_EQ_vfprintf(...) ,
#define P99__IS_vfscanf_EQ_vfscanf(...) ,
#define P99__IS_vfwprintf_EQ_vfwprintf(...) ,
#define P99__IS_void_EQ_void(...) ,
#define P99__IS_volatile_EQ_volatile(...) ,
#define P99__IS_vprintf_EQ_vprintf(...) ,
#define P99__IS_vscanf_EQ_vscanf(...) ,
#define P99__IS_vsprintf_EQ_vsprintf(...) ,
#define P99__IS_vsscanf_EQ_vsscanf(...) ,
#define P99__IS_vswprintf_EQ_vswprintf(...) ,
#define P99__IS_vwprintf_EQ_vwprintf(...) ,
#define P99__IS_wchar_t_EQ_wchar_t(...) ,
#define P99__IS_wcrtomb_EQ_wcrtomb(...) ,
#define P99__IS_wcscat_EQ_wcscat(...) ,
#define P99__IS_wcschr_EQ_wcschr(...) ,
#define P99__IS_wcscmp_EQ_wcscmp(...) ,
#define P99__IS_wcscoll_EQ_wcscoll(...) ,
#define P99__IS_wcscpy_EQ_wcscpy(...) ,
#define P99__IS_wcscspn_EQ_wcscspn(...) ,
#define P99__IS_wcsftime_EQ_wcsftime(...) ,
#define P99__IS_wcslen_EQ_wcslen(...) ,
#define P99__IS_wcsncat_EQ_wcsncat(...) ,
#define P99__IS_wcsncmp_EQ_wcsncmp(...) ,
#define P99__IS_wcsncpy_EQ_wcsncpy(...) ,
#define P99__IS_wcspbrk_EQ_wcspbrk(...) ,
#define P99__IS_wcsrchr_EQ_wcsrchr(...) ,
#define P99__IS_wcsrtombs_EQ_wcsrtombs(...) ,
#define P99__IS_wcsspn_EQ_wcsspn(...) ,
#define P99__IS_wcsstr_EQ_wcsstr(...) ,
#define P99__IS_wcstod_EQ_wcstod(...) ,
#define P99__IS_wcstoimax_EQ_wcstoimax(...) ,
#define P99__IS_wcstok_EQ_wcstok(...) ,
#define P99__IS_wcstol_EQ_wcstol(...) ,
#define P99__IS_wcstoul_EQ_wcstoul(...) ,
#define P99__IS_wcstoumax_EQ_wcstoumax(...) ,
#define P99__IS_wcsxfrm_EQ_wcsxfrm(...) ,
#define P99__IS_wctob_EQ_wctob(...) ,
#define P99__IS_wctrans_EQ_wctrans(...) ,
#define P99__IS_wctrans_t_EQ_wctrans_t(...) ,
#define P99__IS_wctype_EQ_wctype(...) ,
#define P99__IS_wctype_t_EQ_wctype_t(...) ,
#define P99__IS_while_EQ_while(...) ,
#define P99__IS_wint_t_EQ_wint_t(...) ,
#define P99__IS_wmemchr_EQ_wmemchr(...) ,
#define P99__IS_wmemcmp_EQ_wmemcmp(...) ,
#define P99__IS_wmemcpy_EQ_wmemcpy(...) ,
#define P99__IS_wmemmove_EQ_wmemmove(...) ,
#define P99__IS_wmemset_EQ_wmemset(...) ,
#define P99__IS_wprintf_EQ_wprintf(...) ,
#define P99__IS_wscanf_EQ_wscanf(...) ,
/*! @brief Test if the argument consists of exactly the token @c 0 */
#define P99_IS_EQ_0(...) P99_TOK_EQ(0, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 1 */
#define P99_IS_EQ_1(...) P99_TOK_EQ(1, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 2 */
#define P99_IS_EQ_2(...) P99_TOK_EQ(2, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 3 */
#define P99_IS_EQ_3(...) P99_TOK_EQ(3, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 4 */
#define P99_IS_EQ_4(...) P99_TOK_EQ(4, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 5 */
#define P99_IS_EQ_5(...) P99_TOK_EQ(5, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 6 */
#define P99_IS_EQ_6(...) P99_TOK_EQ(6, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 7 */
#define P99_IS_EQ_7(...) P99_TOK_EQ(7, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 8 */
#define P99_IS_EQ_8(...) P99_TOK_EQ(8, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 9 */
#define P99_IS_EQ_9(...) P99_TOK_EQ(9, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 10 */
#define P99_IS_EQ_10(...) P99_TOK_EQ(10, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 11 */
#define P99_IS_EQ_11(...) P99_TOK_EQ(11, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 12 */
#define P99_IS_EQ_12(...) P99_TOK_EQ(12, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 13 */
#define P99_IS_EQ_13(...) P99_TOK_EQ(13, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 14 */
#define P99_IS_EQ_14(...) P99_TOK_EQ(14, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 15 */
#define P99_IS_EQ_15(...) P99_TOK_EQ(15, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 16 */
#define P99_IS_EQ_16(...) P99_TOK_EQ(16, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 17 */
#define P99_IS_EQ_17(...) P99_TOK_EQ(17, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 18 */
#define P99_IS_EQ_18(...) P99_TOK_EQ(18, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 19 */
#define P99_IS_EQ_19(...) P99_TOK_EQ(19, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 20 */
#define P99_IS_EQ_20(...) P99_TOK_EQ(20, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 21 */
#define P99_IS_EQ_21(...) P99_TOK_EQ(21, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 22 */
#define P99_IS_EQ_22(...) P99_TOK_EQ(22, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 23 */
#define P99_IS_EQ_23(...) P99_TOK_EQ(23, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 24 */
#define P99_IS_EQ_24(...) P99_TOK_EQ(24, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 25 */
#define P99_IS_EQ_25(...) P99_TOK_EQ(25, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 26 */
#define P99_IS_EQ_26(...) P99_TOK_EQ(26, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 27 */
#define P99_IS_EQ_27(...) P99_TOK_EQ(27, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 28 */
#define P99_IS_EQ_28(...) P99_TOK_EQ(28, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 29 */
#define P99_IS_EQ_29(...) P99_TOK_EQ(29, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 30 */
#define P99_IS_EQ_30(...) P99_TOK_EQ(30, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 31 */
#define P99_IS_EQ_31(...) P99_TOK_EQ(31, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 32 */
#define P99_IS_EQ_32(...) P99_TOK_EQ(32, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 33 */
#define P99_IS_EQ_33(...) P99_TOK_EQ(33, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 34 */
#define P99_IS_EQ_34(...) P99_TOK_EQ(34, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 35 */
#define P99_IS_EQ_35(...) P99_TOK_EQ(35, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 36 */
#define P99_IS_EQ_36(...) P99_TOK_EQ(36, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 37 */
#define P99_IS_EQ_37(...) P99_TOK_EQ(37, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 38 */
#define P99_IS_EQ_38(...) P99_TOK_EQ(38, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 39 */
#define P99_IS_EQ_39(...) P99_TOK_EQ(39, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 40 */
#define P99_IS_EQ_40(...) P99_TOK_EQ(40, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 41 */
#define P99_IS_EQ_41(...) P99_TOK_EQ(41, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 42 */
#define P99_IS_EQ_42(...) P99_TOK_EQ(42, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 43 */
#define P99_IS_EQ_43(...) P99_TOK_EQ(43, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 44 */
#define P99_IS_EQ_44(...) P99_TOK_EQ(44, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 45 */
#define P99_IS_EQ_45(...) P99_TOK_EQ(45, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 46 */
#define P99_IS_EQ_46(...) P99_TOK_EQ(46, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 47 */
#define P99_IS_EQ_47(...) P99_TOK_EQ(47, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 48 */
#define P99_IS_EQ_48(...) P99_TOK_EQ(48, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 49 */
#define P99_IS_EQ_49(...) P99_TOK_EQ(49, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 50 */
#define P99_IS_EQ_50(...) P99_TOK_EQ(50, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 51 */
#define P99_IS_EQ_51(...) P99_TOK_EQ(51, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 52 */
#define P99_IS_EQ_52(...) P99_TOK_EQ(52, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 53 */
#define P99_IS_EQ_53(...) P99_TOK_EQ(53, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 54 */
#define P99_IS_EQ_54(...) P99_TOK_EQ(54, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 55 */
#define P99_IS_EQ_55(...) P99_TOK_EQ(55, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 56 */
#define P99_IS_EQ_56(...) P99_TOK_EQ(56, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 57 */
#define P99_IS_EQ_57(...) P99_TOK_EQ(57, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 58 */
#define P99_IS_EQ_58(...) P99_TOK_EQ(58, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 59 */
#define P99_IS_EQ_59(...) P99_TOK_EQ(59, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 60 */
#define P99_IS_EQ_60(...) P99_TOK_EQ(60, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 61 */
#define P99_IS_EQ_61(...) P99_TOK_EQ(61, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 62 */
#define P99_IS_EQ_62(...) P99_TOK_EQ(62, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 63 */
#define P99_IS_EQ_63(...) P99_TOK_EQ(63, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 64 */
#define P99_IS_EQ_64(...) P99_TOK_EQ(64, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 65 */
#define P99_IS_EQ_65(...) P99_TOK_EQ(65, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 66 */
#define P99_IS_EQ_66(...) P99_TOK_EQ(66, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 67 */
#define P99_IS_EQ_67(...) P99_TOK_EQ(67, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 68 */
#define P99_IS_EQ_68(...) P99_TOK_EQ(68, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 69 */
#define P99_IS_EQ_69(...) P99_TOK_EQ(69, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 70 */
#define P99_IS_EQ_70(...) P99_TOK_EQ(70, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 71 */
#define P99_IS_EQ_71(...) P99_TOK_EQ(71, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 72 */
#define P99_IS_EQ_72(...) P99_TOK_EQ(72, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 73 */
#define P99_IS_EQ_73(...) P99_TOK_EQ(73, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 74 */
#define P99_IS_EQ_74(...) P99_TOK_EQ(74, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 75 */
#define P99_IS_EQ_75(...) P99_TOK_EQ(75, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 76 */
#define P99_IS_EQ_76(...) P99_TOK_EQ(76, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 77 */
#define P99_IS_EQ_77(...) P99_TOK_EQ(77, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 78 */
#define P99_IS_EQ_78(...) P99_TOK_EQ(78, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 79 */
#define P99_IS_EQ_79(...) P99_TOK_EQ(79, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 80 */
#define P99_IS_EQ_80(...) P99_TOK_EQ(80, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c 81 */
#define P99_IS_EQ_81(...) P99_TOK_EQ(81, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c _Bool */
#define P99_IS_EQ__Bool(...) P99_TOK_EQ(_Bool, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c _Complex */
#define P99_IS_EQ__Complex(...) P99_TOK_EQ(_Complex, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c _Exit */
#define P99_IS_EQ__Exit(...) P99_TOK_EQ(_Exit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c _Imaginary */
#define P99_IS_EQ__Imaginary(...) P99_TOK_EQ(_Imaginary, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c abort */
#define P99_IS_EQ_abort(...) P99_TOK_EQ(abort, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c abs */
#define P99_IS_EQ_abs(...) P99_TOK_EQ(abs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c acos */
#define P99_IS_EQ_acos(...) P99_TOK_EQ(acos, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c asctime */
#define P99_IS_EQ_asctime(...) P99_TOK_EQ(asctime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c asin */
#define P99_IS_EQ_asin(...) P99_TOK_EQ(asin, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c assert */
#define P99_IS_EQ_assert(...) P99_TOK_EQ(assert, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c atan */
#define P99_IS_EQ_atan(...) P99_TOK_EQ(atan, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c atan2 */
#define P99_IS_EQ_atan2(...) P99_TOK_EQ(atan2, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c atexit */
#define P99_IS_EQ_atexit(...) P99_TOK_EQ(atexit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c atof */
#define P99_IS_EQ_atof(...) P99_TOK_EQ(atof, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c atof */
#define P99_IS_EQ_atof(...) P99_TOK_EQ(atof, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c atoi */
#define P99_IS_EQ_atoi(...) P99_TOK_EQ(atoi, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c atol */
#define P99_IS_EQ_atol(...) P99_TOK_EQ(atol, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c auto */
#define P99_IS_EQ_auto(...) P99_TOK_EQ(auto, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c break */
#define P99_IS_EQ_break(...) P99_TOK_EQ(break, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c bsearch */
#define P99_IS_EQ_bsearch(...) P99_TOK_EQ(bsearch, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c btowc */
#define P99_IS_EQ_btowc(...) P99_TOK_EQ(btowc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cabs */
#define P99_IS_EQ_cabs(...) P99_TOK_EQ(cabs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cacos */
#define P99_IS_EQ_cacos(...) P99_TOK_EQ(cacos, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cacosh */
#define P99_IS_EQ_cacosh(...) P99_TOK_EQ(cacosh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c calloc */
#define P99_IS_EQ_calloc(...) P99_TOK_EQ(calloc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c carg */
#define P99_IS_EQ_carg(...) P99_TOK_EQ(carg, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c case */
#define P99_IS_EQ_case(...) P99_TOK_EQ(case, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c casin */
#define P99_IS_EQ_casin(...) P99_TOK_EQ(casin, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c casinh */
#define P99_IS_EQ_casinh(...) P99_TOK_EQ(casinh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c catan */
#define P99_IS_EQ_catan(...) P99_TOK_EQ(catan, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c catanh */
#define P99_IS_EQ_catanh(...) P99_TOK_EQ(catanh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ccos */
#define P99_IS_EQ_ccos(...) P99_TOK_EQ(ccos, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ccosh */
#define P99_IS_EQ_ccosh(...) P99_TOK_EQ(ccosh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ceil */
#define P99_IS_EQ_ceil(...) P99_TOK_EQ(ceil, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cexp */
#define P99_IS_EQ_cexp(...) P99_TOK_EQ(cexp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c char */
#define P99_IS_EQ_char(...) P99_TOK_EQ(char, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cimag */
#define P99_IS_EQ_cimag(...) P99_TOK_EQ(cimag, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c clearerr */
#define P99_IS_EQ_clearerr(...) P99_TOK_EQ(clearerr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c clock */
#define P99_IS_EQ_clock(...) P99_TOK_EQ(clock, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c clock_t */
#define P99_IS_EQ_clock_t(...) P99_TOK_EQ(clock_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c clog */
#define P99_IS_EQ_clog(...) P99_TOK_EQ(clog, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c conj */
#define P99_IS_EQ_conj(...) P99_TOK_EQ(conj, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c const */
#define P99_IS_EQ_const(...) P99_TOK_EQ(const, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c continue */
#define P99_IS_EQ_continue(...) P99_TOK_EQ(continue, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cos */
#define P99_IS_EQ_cos(...) P99_TOK_EQ(cos, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cosh */
#define P99_IS_EQ_cosh(...) P99_TOK_EQ(cosh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cpow */
#define P99_IS_EQ_cpow(...) P99_TOK_EQ(cpow, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c cproj */
#define P99_IS_EQ_cproj(...) P99_TOK_EQ(cproj, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c creal */
#define P99_IS_EQ_creal(...) P99_TOK_EQ(creal, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c csin */
#define P99_IS_EQ_csin(...) P99_TOK_EQ(csin, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c csinh */
#define P99_IS_EQ_csinh(...) P99_TOK_EQ(csinh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c csqrt */
#define P99_IS_EQ_csqrt(...) P99_TOK_EQ(csqrt, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ctan */
#define P99_IS_EQ_ctan(...) P99_TOK_EQ(ctan, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ctanh */
#define P99_IS_EQ_ctanh(...) P99_TOK_EQ(ctanh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ctime */
#define P99_IS_EQ_ctime(...) P99_TOK_EQ(ctime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c default */
#define P99_IS_EQ_default(...) P99_TOK_EQ(default, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c difftime */
#define P99_IS_EQ_difftime(...) P99_TOK_EQ(difftime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c div */
#define P99_IS_EQ_div(...) P99_TOK_EQ(div, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c div_t */
#define P99_IS_EQ_div_t(...) P99_TOK_EQ(div_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c do */
#define P99_IS_EQ_do(...) P99_TOK_EQ(do, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c double */
#define P99_IS_EQ_double(...) P99_TOK_EQ(double, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c double_t */
#define P99_IS_EQ_double_t(...) P99_TOK_EQ(double_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c else */
#define P99_IS_EQ_else(...) P99_TOK_EQ(else, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c enum */
#define P99_IS_EQ_enum(...) P99_TOK_EQ(enum, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c exit */
#define P99_IS_EQ_exit(...) P99_TOK_EQ(exit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c exp */
#define P99_IS_EQ_exp(...) P99_TOK_EQ(exp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c extern */
#define P99_IS_EQ_extern(...) P99_TOK_EQ(extern, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fabs */
#define P99_IS_EQ_fabs(...) P99_TOK_EQ(fabs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fclose */
#define P99_IS_EQ_fclose(...) P99_TOK_EQ(fclose, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fdopen */
#define P99_IS_EQ_fdopen(...) P99_TOK_EQ(fdopen, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fenv_t */
#define P99_IS_EQ_fenv_t(...) P99_TOK_EQ(fenv_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c feof */
#define P99_IS_EQ_feof(...) P99_TOK_EQ(feof, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ferror */
#define P99_IS_EQ_ferror(...) P99_TOK_EQ(ferror, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fexcept_t */
#define P99_IS_EQ_fexcept_t(...) P99_TOK_EQ(fexcept_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fflush */
#define P99_IS_EQ_fflush(...) P99_TOK_EQ(fflush, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fgetc */
#define P99_IS_EQ_fgetc(...) P99_TOK_EQ(fgetc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fgetpos */
#define P99_IS_EQ_fgetpos(...) P99_TOK_EQ(fgetpos, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fgets */
#define P99_IS_EQ_fgets(...) P99_TOK_EQ(fgets, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fgetwc */
#define P99_IS_EQ_fgetwc(...) P99_TOK_EQ(fgetwc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fgetws */
#define P99_IS_EQ_fgetws(...) P99_TOK_EQ(fgetws, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c float */
#define P99_IS_EQ_float(...) P99_TOK_EQ(float, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c float_t */
#define P99_IS_EQ_float_t(...) P99_TOK_EQ(float_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c floor */
#define P99_IS_EQ_floor(...) P99_TOK_EQ(floor, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fopen */
#define P99_IS_EQ_fopen(...) P99_TOK_EQ(fopen, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c for */
#define P99_IS_EQ_for(...) P99_TOK_EQ(for, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fpos_t */
#define P99_IS_EQ_fpos_t(...) P99_TOK_EQ(fpos_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fprintf */
#define P99_IS_EQ_fprintf(...) P99_TOK_EQ(fprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fprintf */
#define P99_IS_EQ_fprintf(...) P99_TOK_EQ(fprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fputc */
#define P99_IS_EQ_fputc(...) P99_TOK_EQ(fputc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fputchar */
#define P99_IS_EQ_fputchar(...) P99_TOK_EQ(fputchar, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fputs */
#define P99_IS_EQ_fputs(...) P99_TOK_EQ(fputs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fputwc */
#define P99_IS_EQ_fputwc(...) P99_TOK_EQ(fputwc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fputws */
#define P99_IS_EQ_fputws(...) P99_TOK_EQ(fputws, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fread */
#define P99_IS_EQ_fread(...) P99_TOK_EQ(fread, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c free */
#define P99_IS_EQ_free(...) P99_TOK_EQ(free, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c freopen */
#define P99_IS_EQ_freopen(...) P99_TOK_EQ(freopen, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c frexp */
#define P99_IS_EQ_frexp(...) P99_TOK_EQ(frexp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fscanf */
#define P99_IS_EQ_fscanf(...) P99_TOK_EQ(fscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fscanf */
#define P99_IS_EQ_fscanf(...) P99_TOK_EQ(fscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fseek */
#define P99_IS_EQ_fseek(...) P99_TOK_EQ(fseek, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fsetpos */
#define P99_IS_EQ_fsetpos(...) P99_TOK_EQ(fsetpos, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ftell */
#define P99_IS_EQ_ftell(...) P99_TOK_EQ(ftell, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fwide */
#define P99_IS_EQ_fwide(...) P99_TOK_EQ(fwide, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fwprintf */
#define P99_IS_EQ_fwprintf(...) P99_TOK_EQ(fwprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fwrite */
#define P99_IS_EQ_fwrite(...) P99_TOK_EQ(fwrite, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c fwscanf */
#define P99_IS_EQ_fwscanf(...) P99_TOK_EQ(fwscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c getaddrinfo */
#define P99_IS_EQ_getaddrinfo(...) P99_TOK_EQ(getaddrinfo, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c getc */
#define P99_IS_EQ_getc(...) P99_TOK_EQ(getc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c getchar */
#define P99_IS_EQ_getchar(...) P99_TOK_EQ(getchar, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c getenv */
#define P99_IS_EQ_getenv(...) P99_TOK_EQ(getenv, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c getnameinfo */
#define P99_IS_EQ_getnameinfo(...) P99_TOK_EQ(getnameinfo, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c gets */
#define P99_IS_EQ_gets(...) P99_TOK_EQ(gets, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c getwc */
#define P99_IS_EQ_getwc(...) P99_TOK_EQ(getwc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c getwchar */
#define P99_IS_EQ_getwchar(...) P99_TOK_EQ(getwchar, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c gmtime */
#define P99_IS_EQ_gmtime(...) P99_TOK_EQ(gmtime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c goto */
#define P99_IS_EQ_goto(...) P99_TOK_EQ(goto, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c if */
#define P99_IS_EQ_if(...) P99_TOK_EQ(if, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c imaxabs */
#define P99_IS_EQ_imaxabs(...) P99_TOK_EQ(imaxabs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c imaxdiv */
#define P99_IS_EQ_imaxdiv(...) P99_TOK_EQ(imaxdiv, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c imaxdiv_t */
#define P99_IS_EQ_imaxdiv_t(...) P99_TOK_EQ(imaxdiv_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c inline */
#define P99_IS_EQ_inline(...) P99_TOK_EQ(inline, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c int */
#define P99_IS_EQ_int(...) P99_TOK_EQ(int, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c int16_t */
#define P99_IS_EQ_int16_t(...) P99_TOK_EQ(int16_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c int32_t */
#define P99_IS_EQ_int32_t(...) P99_TOK_EQ(int32_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c int64_t */
#define P99_IS_EQ_int64_t(...) P99_TOK_EQ(int64_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c int8_t */
#define P99_IS_EQ_int8_t(...) P99_TOK_EQ(int8_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intfast16_t */
#define P99_IS_EQ_intfast16_t(...) P99_TOK_EQ(intfast16_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intfast32_t */
#define P99_IS_EQ_intfast32_t(...) P99_TOK_EQ(intfast32_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intfast64_t */
#define P99_IS_EQ_intfast64_t(...) P99_TOK_EQ(intfast64_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intfast8_t */
#define P99_IS_EQ_intfast8_t(...) P99_TOK_EQ(intfast8_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intleast16_t */
#define P99_IS_EQ_intleast16_t(...) P99_TOK_EQ(intleast16_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intleast32_t */
#define P99_IS_EQ_intleast32_t(...) P99_TOK_EQ(intleast32_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intleast64_t */
#define P99_IS_EQ_intleast64_t(...) P99_TOK_EQ(intleast64_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intleast8_t */
#define P99_IS_EQ_intleast8_t(...) P99_TOK_EQ(intleast8_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intmax_t */
#define P99_IS_EQ_intmax_t(...) P99_TOK_EQ(intmax_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c intptr_t */
#define P99_IS_EQ_intptr_t(...) P99_TOK_EQ(intptr_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isalnum */
#define P99_IS_EQ_isalnum(...) P99_TOK_EQ(isalnum, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isalpha */
#define P99_IS_EQ_isalpha(...) P99_TOK_EQ(isalpha, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isblank */
#define P99_IS_EQ_isblank(...) P99_TOK_EQ(isblank, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iscntrl */
#define P99_IS_EQ_iscntrl(...) P99_TOK_EQ(iscntrl, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isdigit */
#define P99_IS_EQ_isdigit(...) P99_TOK_EQ(isdigit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isgraph */
#define P99_IS_EQ_isgraph(...) P99_TOK_EQ(isgraph, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c islower */
#define P99_IS_EQ_islower(...) P99_TOK_EQ(islower, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isprint */
#define P99_IS_EQ_isprint(...) P99_TOK_EQ(isprint, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ispunct */
#define P99_IS_EQ_ispunct(...) P99_TOK_EQ(ispunct, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isspace */
#define P99_IS_EQ_isspace(...) P99_TOK_EQ(isspace, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isupper */
#define P99_IS_EQ_isupper(...) P99_TOK_EQ(isupper, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswalnum */
#define P99_IS_EQ_iswalnum(...) P99_TOK_EQ(iswalnum, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswalpha */
#define P99_IS_EQ_iswalpha(...) P99_TOK_EQ(iswalpha, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswcntrl */
#define P99_IS_EQ_iswcntrl(...) P99_TOK_EQ(iswcntrl, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswctype */
#define P99_IS_EQ_iswctype(...) P99_TOK_EQ(iswctype, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswdigit */
#define P99_IS_EQ_iswdigit(...) P99_TOK_EQ(iswdigit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswgraph */
#define P99_IS_EQ_iswgraph(...) P99_TOK_EQ(iswgraph, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswlower */
#define P99_IS_EQ_iswlower(...) P99_TOK_EQ(iswlower, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswprint */
#define P99_IS_EQ_iswprint(...) P99_TOK_EQ(iswprint, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswpunct */
#define P99_IS_EQ_iswpunct(...) P99_TOK_EQ(iswpunct, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswspace */
#define P99_IS_EQ_iswspace(...) P99_TOK_EQ(iswspace, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswupper */
#define P99_IS_EQ_iswupper(...) P99_TOK_EQ(iswupper, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c iswxdigit */
#define P99_IS_EQ_iswxdigit(...) P99_TOK_EQ(iswxdigit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c isxdigit */
#define P99_IS_EQ_isxdigit(...) P99_TOK_EQ(isxdigit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c labs */
#define P99_IS_EQ_labs(...) P99_TOK_EQ(labs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ldexp */
#define P99_IS_EQ_ldexp(...) P99_TOK_EQ(ldexp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ldiv */
#define P99_IS_EQ_ldiv(...) P99_TOK_EQ(ldiv, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ldiv */
#define P99_IS_EQ_ldiv(...) P99_TOK_EQ(ldiv, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ldiv_t */
#define P99_IS_EQ_ldiv_t(...) P99_TOK_EQ(ldiv_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c lldiv_t */
#define P99_IS_EQ_lldiv_t(...) P99_TOK_EQ(lldiv_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c localeconv */
#define P99_IS_EQ_localeconv(...) P99_TOK_EQ(localeconv, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c localtime */
#define P99_IS_EQ_localtime(...) P99_TOK_EQ(localtime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c log */
#define P99_IS_EQ_log(...) P99_TOK_EQ(log, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c log10 */
#define P99_IS_EQ_log10(...) P99_TOK_EQ(log10, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c long */
#define P99_IS_EQ_long(...) P99_TOK_EQ(long, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c longjmp */
#define P99_IS_EQ_longjmp(...) P99_TOK_EQ(longjmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c malloc */
#define P99_IS_EQ_malloc(...) P99_TOK_EQ(malloc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c mbrlen */
#define P99_IS_EQ_mbrlen(...) P99_TOK_EQ(mbrlen, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c mbrtowc */
#define P99_IS_EQ_mbrtowc(...) P99_TOK_EQ(mbrtowc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c mbsinit */
#define P99_IS_EQ_mbsinit(...) P99_TOK_EQ(mbsinit, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c mbsrtowcs */
#define P99_IS_EQ_mbsrtowcs(...) P99_TOK_EQ(mbsrtowcs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c mbstate_t */
#define P99_IS_EQ_mbstate_t(...) P99_TOK_EQ(mbstate_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c memchr */
#define P99_IS_EQ_memchr(...) P99_TOK_EQ(memchr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c memcmp */
#define P99_IS_EQ_memcmp(...) P99_TOK_EQ(memcmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c memcpy */
#define P99_IS_EQ_memcpy(...) P99_TOK_EQ(memcpy, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c memmove */
#define P99_IS_EQ_memmove(...) P99_TOK_EQ(memmove, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c memset */
#define P99_IS_EQ_memset(...) P99_TOK_EQ(memset, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c mktime */
#define P99_IS_EQ_mktime(...) P99_TOK_EQ(mktime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c modf */
#define P99_IS_EQ_modf(...) P99_TOK_EQ(modf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c off_t */
#define P99_IS_EQ_off_t(...) P99_TOK_EQ(off_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c offsetof */
#define P99_IS_EQ_offsetof(...) P99_TOK_EQ(offsetof, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c perror */
#define P99_IS_EQ_perror(...) P99_TOK_EQ(perror, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c pow */
#define P99_IS_EQ_pow(...) P99_TOK_EQ(pow, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c printf */
#define P99_IS_EQ_printf(...) P99_TOK_EQ(printf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ptrdiff_t */
#define P99_IS_EQ_ptrdiff_t(...) P99_TOK_EQ(ptrdiff_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c putc */
#define P99_IS_EQ_putc(...) P99_TOK_EQ(putc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c putchar */
#define P99_IS_EQ_putchar(...) P99_TOK_EQ(putchar, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c puts */
#define P99_IS_EQ_puts(...) P99_TOK_EQ(puts, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c putwc */
#define P99_IS_EQ_putwc(...) P99_TOK_EQ(putwc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c putwchar */
#define P99_IS_EQ_putwchar(...) P99_TOK_EQ(putwchar, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c qsort */
#define P99_IS_EQ_qsort(...) P99_TOK_EQ(qsort, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c raise */
#define P99_IS_EQ_raise(...) P99_TOK_EQ(raise, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c rand */
#define P99_IS_EQ_rand(...) P99_TOK_EQ(rand, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c realloc */
#define P99_IS_EQ_realloc(...) P99_TOK_EQ(realloc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c register */
#define P99_IS_EQ_register(...) P99_TOK_EQ(register, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c remove */
#define P99_IS_EQ_remove(...) P99_TOK_EQ(remove, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c rename */
#define P99_IS_EQ_rename(...) P99_TOK_EQ(rename, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c restrict */
#define P99_IS_EQ_restrict(...) P99_TOK_EQ(restrict, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c return */
#define P99_IS_EQ_return(...) P99_TOK_EQ(return, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c rewind */
#define P99_IS_EQ_rewind(...) P99_TOK_EQ(rewind, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c scanf */
#define P99_IS_EQ_scanf(...) P99_TOK_EQ(scanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c setbuf */
#define P99_IS_EQ_setbuf(...) P99_TOK_EQ(setbuf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c setjmp */
#define P99_IS_EQ_setjmp(...) P99_TOK_EQ(setjmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c setlocale */
#define P99_IS_EQ_setlocale(...) P99_TOK_EQ(setlocale, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c setvbuf */
#define P99_IS_EQ_setvbuf(...) P99_TOK_EQ(setvbuf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c short */
#define P99_IS_EQ_short(...) P99_TOK_EQ(short, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c sig_atomic_t */
#define P99_IS_EQ_sig_atomic_t(...) P99_TOK_EQ(sig_atomic_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c signed */
#define P99_IS_EQ_signed(...) P99_TOK_EQ(signed, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c sin */
#define P99_IS_EQ_sin(...) P99_TOK_EQ(sin, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c sinh */
#define P99_IS_EQ_sinh(...) P99_TOK_EQ(sinh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c size_t */
#define P99_IS_EQ_size_t(...) P99_TOK_EQ(size_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c sizeof */
#define P99_IS_EQ_sizeof(...) P99_TOK_EQ(sizeof, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c snprintf */
#define P99_IS_EQ_snprintf(...) P99_TOK_EQ(snprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c sprintf */
#define P99_IS_EQ_sprintf(...) P99_TOK_EQ(sprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c sqrt */
#define P99_IS_EQ_sqrt(...) P99_TOK_EQ(sqrt, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c srand */
#define P99_IS_EQ_srand(...) P99_TOK_EQ(srand, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c sscanf */
#define P99_IS_EQ_sscanf(...) P99_TOK_EQ(sscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ssize_t */
#define P99_IS_EQ_ssize_t(...) P99_TOK_EQ(ssize_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c static */
#define P99_IS_EQ_static(...) P99_TOK_EQ(static, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strcat */
#define P99_IS_EQ_strcat(...) P99_TOK_EQ(strcat, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strchr */
#define P99_IS_EQ_strchr(...) P99_TOK_EQ(strchr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strcmp */
#define P99_IS_EQ_strcmp(...) P99_TOK_EQ(strcmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strcoll */
#define P99_IS_EQ_strcoll(...) P99_TOK_EQ(strcoll, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strcpy */
#define P99_IS_EQ_strcpy(...) P99_TOK_EQ(strcpy, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strcspn */
#define P99_IS_EQ_strcspn(...) P99_TOK_EQ(strcspn, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strerror */
#define P99_IS_EQ_strerror(...) P99_TOK_EQ(strerror, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strftime */
#define P99_IS_EQ_strftime(...) P99_TOK_EQ(strftime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strlen */
#define P99_IS_EQ_strlen(...) P99_TOK_EQ(strlen, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strncat */
#define P99_IS_EQ_strncat(...) P99_TOK_EQ(strncat, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strncmp */
#define P99_IS_EQ_strncmp(...) P99_TOK_EQ(strncmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strncpy */
#define P99_IS_EQ_strncpy(...) P99_TOK_EQ(strncpy, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strpbrk */
#define P99_IS_EQ_strpbrk(...) P99_TOK_EQ(strpbrk, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strrchr */
#define P99_IS_EQ_strrchr(...) P99_TOK_EQ(strrchr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strspn */
#define P99_IS_EQ_strspn(...) P99_TOK_EQ(strspn, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strstr */
#define P99_IS_EQ_strstr(...) P99_TOK_EQ(strstr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strtod */
#define P99_IS_EQ_strtod(...) P99_TOK_EQ(strtod, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strtoimax */
#define P99_IS_EQ_strtoimax(...) P99_TOK_EQ(strtoimax, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strtok */
#define P99_IS_EQ_strtok(...) P99_TOK_EQ(strtok, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strtol */
#define P99_IS_EQ_strtol(...) P99_TOK_EQ(strtol, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strtoul */
#define P99_IS_EQ_strtoul(...) P99_TOK_EQ(strtoul, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strtoumax */
#define P99_IS_EQ_strtoumax(...) P99_TOK_EQ(strtoumax, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c struct */
#define P99_IS_EQ_struct(...) P99_TOK_EQ(struct, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c strxfrm */
#define P99_IS_EQ_strxfrm(...) P99_TOK_EQ(strxfrm, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c switch */
#define P99_IS_EQ_switch(...) P99_TOK_EQ(switch, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c swprintf */
#define P99_IS_EQ_swprintf(...) P99_TOK_EQ(swprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c swscanf */
#define P99_IS_EQ_swscanf(...) P99_TOK_EQ(swscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c system */
#define P99_IS_EQ_system(...) P99_TOK_EQ(system, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c tan */
#define P99_IS_EQ_tan(...) P99_TOK_EQ(tan, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c tanh */
#define P99_IS_EQ_tanh(...) P99_TOK_EQ(tanh, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c time */
#define P99_IS_EQ_time(...) P99_TOK_EQ(time, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c time_t */
#define P99_IS_EQ_time_t(...) P99_TOK_EQ(time_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c tmpfile */
#define P99_IS_EQ_tmpfile(...) P99_TOK_EQ(tmpfile, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c tmpnam */
#define P99_IS_EQ_tmpnam(...) P99_TOK_EQ(tmpnam, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c tolower */
#define P99_IS_EQ_tolower(...) P99_TOK_EQ(tolower, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c toupper */
#define P99_IS_EQ_toupper(...) P99_TOK_EQ(toupper, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c towctrans */
#define P99_IS_EQ_towctrans(...) P99_TOK_EQ(towctrans, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c towlower */
#define P99_IS_EQ_towlower(...) P99_TOK_EQ(towlower, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c towupper */
#define P99_IS_EQ_towupper(...) P99_TOK_EQ(towupper, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c typedef */
#define P99_IS_EQ_typedef(...) P99_TOK_EQ(typedef, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uint16_t */
#define P99_IS_EQ_uint16_t(...) P99_TOK_EQ(uint16_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uint32_t */
#define P99_IS_EQ_uint32_t(...) P99_TOK_EQ(uint32_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uint64_t */
#define P99_IS_EQ_uint64_t(...) P99_TOK_EQ(uint64_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uint8_t */
#define P99_IS_EQ_uint8_t(...) P99_TOK_EQ(uint8_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintfast16_t */
#define P99_IS_EQ_uintfast16_t(...) P99_TOK_EQ(uintfast16_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintfast32_t */
#define P99_IS_EQ_uintfast32_t(...) P99_TOK_EQ(uintfast32_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintfast64_t */
#define P99_IS_EQ_uintfast64_t(...) P99_TOK_EQ(uintfast64_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintfast8_t */
#define P99_IS_EQ_uintfast8_t(...) P99_TOK_EQ(uintfast8_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintleast16_t */
#define P99_IS_EQ_uintleast16_t(...) P99_TOK_EQ(uintleast16_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintleast32_t */
#define P99_IS_EQ_uintleast32_t(...) P99_TOK_EQ(uintleast32_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintleast64_t */
#define P99_IS_EQ_uintleast64_t(...) P99_TOK_EQ(uintleast64_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintleast8_t */
#define P99_IS_EQ_uintleast8_t(...) P99_TOK_EQ(uintleast8_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintmax_t */
#define P99_IS_EQ_uintmax_t(...) P99_TOK_EQ(uintmax_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c uintptr_t */
#define P99_IS_EQ_uintptr_t(...) P99_TOK_EQ(uintptr_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ungetc */
#define P99_IS_EQ_ungetc(...) P99_TOK_EQ(ungetc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c ungetwc */
#define P99_IS_EQ_ungetwc(...) P99_TOK_EQ(ungetwc, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c union */
#define P99_IS_EQ_union(...) P99_TOK_EQ(union, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c unsigned */
#define P99_IS_EQ_unsigned(...) P99_TOK_EQ(unsigned, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c va_arg */
#define P99_IS_EQ_va_arg(...) P99_TOK_EQ(va_arg, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c va_copy */
#define P99_IS_EQ_va_copy(...) P99_TOK_EQ(va_copy, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c va_end */
#define P99_IS_EQ_va_end(...) P99_TOK_EQ(va_end, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c va_start */
#define P99_IS_EQ_va_start(...) P99_TOK_EQ(va_start, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vfprintf */
#define P99_IS_EQ_vfprintf(...) P99_TOK_EQ(vfprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vfscanf */
#define P99_IS_EQ_vfscanf(...) P99_TOK_EQ(vfscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vfwprintf */
#define P99_IS_EQ_vfwprintf(...) P99_TOK_EQ(vfwprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c void */
#define P99_IS_EQ_void(...) P99_TOK_EQ(void, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c volatile */
#define P99_IS_EQ_volatile(...) P99_TOK_EQ(volatile, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vprintf */
#define P99_IS_EQ_vprintf(...) P99_TOK_EQ(vprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vscanf */
#define P99_IS_EQ_vscanf(...) P99_TOK_EQ(vscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vsprintf */
#define P99_IS_EQ_vsprintf(...) P99_TOK_EQ(vsprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vsscanf */
#define P99_IS_EQ_vsscanf(...) P99_TOK_EQ(vsscanf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vswprintf */
#define P99_IS_EQ_vswprintf(...) P99_TOK_EQ(vswprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c vwprintf */
#define P99_IS_EQ_vwprintf(...) P99_TOK_EQ(vwprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wchar_t */
#define P99_IS_EQ_wchar_t(...) P99_TOK_EQ(wchar_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcrtomb */
#define P99_IS_EQ_wcrtomb(...) P99_TOK_EQ(wcrtomb, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcscat */
#define P99_IS_EQ_wcscat(...) P99_TOK_EQ(wcscat, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcschr */
#define P99_IS_EQ_wcschr(...) P99_TOK_EQ(wcschr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcscmp */
#define P99_IS_EQ_wcscmp(...) P99_TOK_EQ(wcscmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcscoll */
#define P99_IS_EQ_wcscoll(...) P99_TOK_EQ(wcscoll, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcscpy */
#define P99_IS_EQ_wcscpy(...) P99_TOK_EQ(wcscpy, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcscspn */
#define P99_IS_EQ_wcscspn(...) P99_TOK_EQ(wcscspn, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsftime */
#define P99_IS_EQ_wcsftime(...) P99_TOK_EQ(wcsftime, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcslen */
#define P99_IS_EQ_wcslen(...) P99_TOK_EQ(wcslen, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsncat */
#define P99_IS_EQ_wcsncat(...) P99_TOK_EQ(wcsncat, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsncmp */
#define P99_IS_EQ_wcsncmp(...) P99_TOK_EQ(wcsncmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsncpy */
#define P99_IS_EQ_wcsncpy(...) P99_TOK_EQ(wcsncpy, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcspbrk */
#define P99_IS_EQ_wcspbrk(...) P99_TOK_EQ(wcspbrk, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsrchr */
#define P99_IS_EQ_wcsrchr(...) P99_TOK_EQ(wcsrchr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsrtombs */
#define P99_IS_EQ_wcsrtombs(...) P99_TOK_EQ(wcsrtombs, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsspn */
#define P99_IS_EQ_wcsspn(...) P99_TOK_EQ(wcsspn, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsstr */
#define P99_IS_EQ_wcsstr(...) P99_TOK_EQ(wcsstr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcstod */
#define P99_IS_EQ_wcstod(...) P99_TOK_EQ(wcstod, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcstoimax */
#define P99_IS_EQ_wcstoimax(...) P99_TOK_EQ(wcstoimax, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcstok */
#define P99_IS_EQ_wcstok(...) P99_TOK_EQ(wcstok, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcstol */
#define P99_IS_EQ_wcstol(...) P99_TOK_EQ(wcstol, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcstoul */
#define P99_IS_EQ_wcstoul(...) P99_TOK_EQ(wcstoul, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcstoumax */
#define P99_IS_EQ_wcstoumax(...) P99_TOK_EQ(wcstoumax, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wcsxfrm */
#define P99_IS_EQ_wcsxfrm(...) P99_TOK_EQ(wcsxfrm, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wctob */
#define P99_IS_EQ_wctob(...) P99_TOK_EQ(wctob, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wctrans */
#define P99_IS_EQ_wctrans(...) P99_TOK_EQ(wctrans, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wctrans_t */
#define P99_IS_EQ_wctrans_t(...) P99_TOK_EQ(wctrans_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wctype */
#define P99_IS_EQ_wctype(...) P99_TOK_EQ(wctype, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wctype_t */
#define P99_IS_EQ_wctype_t(...) P99_TOK_EQ(wctype_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c while */
#define P99_IS_EQ_while(...) P99_TOK_EQ(while, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wint_t */
#define P99_IS_EQ_wint_t(...) P99_TOK_EQ(wint_t, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wmemchr */
#define P99_IS_EQ_wmemchr(...) P99_TOK_EQ(wmemchr, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wmemcmp */
#define P99_IS_EQ_wmemcmp(...) P99_TOK_EQ(wmemcmp, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wmemcpy */
#define P99_IS_EQ_wmemcpy(...) P99_TOK_EQ(wmemcpy, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wmemmove */
#define P99_IS_EQ_wmemmove(...) P99_TOK_EQ(wmemmove, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wmemset */
#define P99_IS_EQ_wmemset(...) P99_TOK_EQ(wmemset, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wprintf */
#define P99_IS_EQ_wprintf(...) P99_TOK_EQ(wprintf, __VA_ARGS__)
/*! @brief Test if the argument consists of exactly the token @c wscanf */
#define P99_IS_EQ_wscanf(...) P99_TOK_EQ(wscanf, __VA_ARGS__)
/**
 ** @}
 **/
#define P99__DEC_PRED_1 0
#define P99__DEC_PRED_2 1
#define P99__DEC_PRED_3 2
#define P99__DEC_PRED_4 3
#define P99__DEC_PRED_5 4
#define P99__DEC_PRED_6 5
#define P99__DEC_PRED_7 6
#define P99__DEC_PRED_8 7
#define P99__DEC_PRED_9 8
#define P99__DEC_PRED_10 9
#define P99__DEC_PRED_11 10
#define P99__DEC_PRED_12 11
#define P99__DEC_PRED_13 12
#define P99__DEC_PRED_14 13
#define P99__DEC_PRED_15 14
#define P99__DEC_PRED_16 15
#define P99__DEC_PRED_17 16
#define P99__DEC_PRED_18 17
#define P99__DEC_PRED_19 18
#define P99__DEC_PRED_20 19
#define P99__DEC_PRED_21 20
#define P99__DEC_PRED_22 21
#define P99__DEC_PRED_23 22
#define P99__DEC_PRED_24 23
#define P99__DEC_PRED_25 24
#define P99__DEC_PRED_26 25
#define P99__DEC_PRED_27 26
#define P99__DEC_PRED_28 27
#define P99__DEC_PRED_29 28
#define P99__DEC_PRED_30 29
#define P99__DEC_PRED_31 30
#define P99__DEC_PRED_32 31
#define P99__DEC_PRED_33 32
#define P99__DEC_PRED_34 33
#define P99__DEC_PRED_35 34
#define P99__DEC_PRED_36 35
#define P99__DEC_PRED_37 36
#define P99__DEC_PRED_38 37
#define P99__DEC_PRED_39 38
#define P99__DEC_PRED_40 39
#define P99__DEC_PRED_41 40
#define P99__DEC_PRED_42 41
#define P99__DEC_PRED_43 42
#define P99__DEC_PRED_44 43
#define P99__DEC_PRED_45 44
#define P99__DEC_PRED_46 45
#define P99__DEC_PRED_47 46
#define P99__DEC_PRED_48 47
#define P99__DEC_PRED_49 48
#define P99__DEC_PRED_50 49
#define P99__DEC_PRED_51 50
#define P99__DEC_PRED_52 51
#define P99__DEC_PRED_53 52
#define P99__DEC_PRED_54 53
#define P99__DEC_PRED_55 54
#define P99__DEC_PRED_56 55
#define P99__DEC_PRED_57 56
#define P99__DEC_PRED_58 57
#define P99__DEC_PRED_59 58
#define P99__DEC_PRED_60 59
#define P99__DEC_PRED_61 60
#define P99__DEC_PRED_62 61
#define P99__DEC_PRED_63 62
#define P99__DEC_PRED_64 63
#define P99__DEC_PRED_65 64
#define P99__DEC_PRED_66 65
#define P99__DEC_PRED_67 66
#define P99__DEC_PRED_68 67
#define P99__DEC_PRED_69 68
#define P99__DEC_PRED_70 69
#define P99__DEC_PRED_71 70
#define P99__DEC_PRED_72 71
#define P99__DEC_PRED_73 72
#define P99__DEC_PRED_74 73
#define P99__DEC_PRED_75 74
#define P99__DEC_PRED_76 75
#define P99__DEC_PRED_77 76
#define P99__DEC_PRED_78 77
#define P99__DEC_PRED_79 78
#define P99__DEC_PRED_80 79
#define P99__DEC_PRED_81 80
#define P99__DEC_PRED_82 81
#define P99__DEC_PRED_minus_0 minus_1
#define P99__DEC_PRED_minus_1 minus_2
#define P99__DEC_PRED_minus_2 minus_3
#define P99__DEC_PRED_minus_3 minus_4
#define P99__DEC_PRED_minus_4 minus_5
#define P99__DEC_PRED_minus_5 minus_6
#define P99__DEC_PRED_minus_6 minus_7
#define P99__DEC_PRED_minus_7 minus_8
#define P99__DEC_PRED_minus_8 minus_9
#define P99__DEC_PRED_minus_9 minus_10
#define P99__DEC_PRED_minus_10 minus_11
#define P99__DEC_PRED_minus_11 minus_12
#define P99__DEC_PRED_minus_12 minus_13
#define P99__DEC_PRED_minus_13 minus_14
#define P99__DEC_PRED_minus_14 minus_15
#define P99__DEC_PRED_minus_15 minus_16
#define P99__DEC_PRED_minus_16 minus_17
#define P99__DEC_PRED_minus_17 minus_18
#define P99__DEC_PRED_minus_18 minus_19
#define P99__DEC_PRED_minus_19 minus_20
#define P99__DEC_PRED_minus_20 minus_21
#define P99__DEC_PRED_minus_21 minus_22
#define P99__DEC_PRED_minus_22 minus_23
#define P99__DEC_PRED_minus_23 minus_24
#define P99__DEC_PRED_minus_24 minus_25
#define P99__DEC_PRED_minus_25 minus_26
#define P99__DEC_PRED_minus_26 minus_27
#define P99__DEC_PRED_minus_27 minus_28
#define P99__DEC_PRED_minus_28 minus_29
#define P99__DEC_PRED_minus_29 minus_30
#define P99__DEC_PRED_minus_30 minus_31
#define P99__DEC_PRED_minus_31 minus_32
#define P99__DEC_PRED_minus_32 minus_33
#define P99__DEC_PRED_minus_33 minus_34
#define P99__DEC_PRED_minus_34 minus_35
#define P99__DEC_PRED_minus_35 minus_36
#define P99__DEC_PRED_minus_36 minus_37
#define P99__DEC_PRED_minus_37 minus_38
#define P99__DEC_PRED_minus_38 minus_39
#define P99__DEC_PRED_minus_39 minus_40
#define P99__DEC_PRED_minus_40 minus_41
#define P99__DEC_PRED_minus_41 minus_42
#define P99__DEC_PRED_minus_42 minus_43
#define P99__DEC_PRED_minus_43 minus_44
#define P99__DEC_PRED_minus_44 minus_45
#define P99__DEC_PRED_minus_45 minus_46
#define P99__DEC_PRED_minus_46 minus_47
#define P99__DEC_PRED_minus_47 minus_48
#define P99__DEC_PRED_minus_48 minus_49
#define P99__DEC_PRED_minus_49 minus_50
#define P99__DEC_PRED_minus_50 minus_51
#define P99__DEC_PRED_minus_51 minus_52
#define P99__DEC_PRED_minus_52 minus_53
#define P99__DEC_PRED_minus_53 minus_54
#define P99__DEC_PRED_minus_54 minus_55
#define P99__DEC_PRED_minus_55 minus_56
#define P99__DEC_PRED_minus_56 minus_57
#define P99__DEC_PRED_minus_57 minus_58
#define P99__DEC_PRED_minus_58 minus_59
#define P99__DEC_PRED_minus_59 minus_60
#define P99__DEC_PRED_minus_60 minus_61
#define P99__DEC_PRED_minus_61 minus_62
#define P99__DEC_PRED_minus_62 minus_63
#define P99__DEC_PRED_minus_63 minus_64
#define P99__DEC_PRED_minus_64 minus_65
#define P99__DEC_PRED_minus_65 minus_66
#define P99__DEC_PRED_minus_66 minus_67
#define P99__DEC_PRED_minus_67 minus_68
#define P99__DEC_PRED_minus_68 minus_69
#define P99__DEC_PRED_minus_69 minus_70
#define P99__DEC_PRED_minus_70 minus_71
#define P99__DEC_PRED_minus_71 minus_72
#define P99__DEC_PRED_minus_72 minus_73
#define P99__DEC_PRED_minus_73 minus_74
#define P99__DEC_PRED_minus_74 minus_75
#define P99__DEC_PRED_minus_75 minus_76
#define P99__DEC_PRED_minus_76 minus_77
#define P99__DEC_PRED_minus_77 minus_78
#define P99__DEC_PRED_minus_78 minus_79
#define P99__DEC_PRED_minus_79 minus_80
#define P99__DEC_PRED_minus_80 minus_81
#define P99__DEC_PRED_minus_81 minus_82
#define P99__minus_minus_0 0
#define P99__minus_minus_1 1
#define P99__minus_minus_2 2
#define P99__minus_minus_3 3
#define P99__minus_minus_4 4
#define P99__minus_minus_5 5
#define P99__minus_minus_6 6
#define P99__minus_minus_7 7
#define P99__minus_minus_8 8
#define P99__minus_minus_9 9
#define P99__minus_minus_10 10
#define P99__minus_minus_11 11
#define P99__minus_minus_12 12
#define P99__minus_minus_13 13
#define P99__minus_minus_14 14
#define P99__minus_minus_15 15
#define P99__minus_minus_16 16
#define P99__minus_minus_17 17
#define P99__minus_minus_18 18
#define P99__minus_minus_19 19
#define P99__minus_minus_20 20
#define P99__minus_minus_21 21
#define P99__minus_minus_22 22
#define P99__minus_minus_23 23
#define P99__minus_minus_24 24
#define P99__minus_minus_25 25
#define P99__minus_minus_26 26
#define P99__minus_minus_27 27
#define P99__minus_minus_28 28
#define P99__minus_minus_29 29
#define P99__minus_minus_30 30
#define P99__minus_minus_31 31
#define P99__minus_minus_32 32
#define P99__minus_minus_33 33
#define P99__minus_minus_34 34
#define P99__minus_minus_35 35
#define P99__minus_minus_36 36
#define P99__minus_minus_37 37
#define P99__minus_minus_38 38
#define P99__minus_minus_39 39
#define P99__minus_minus_40 40
#define P99__minus_minus_41 41
#define P99__minus_minus_42 42
#define P99__minus_minus_43 43
#define P99__minus_minus_44 44
#define P99__minus_minus_45 45
#define P99__minus_minus_46 46
#define P99__minus_minus_47 47
#define P99__minus_minus_48 48
#define P99__minus_minus_49 49
#define P99__minus_minus_50 50
#define P99__minus_minus_51 51
#define P99__minus_minus_52 52
#define P99__minus_minus_53 53
#define P99__minus_minus_54 54
#define P99__minus_minus_55 55
#define P99__minus_minus_56 56
#define P99__minus_minus_57 57
#define P99__minus_minus_58 58
#define P99__minus_minus_59 59
#define P99__minus_minus_60 60
#define P99__minus_minus_61 61
#define P99__minus_minus_62 62
#define P99__minus_minus_63 63
#define P99__minus_minus_64 64
#define P99__minus_minus_65 65
#define P99__minus_minus_66 66
#define P99__minus_minus_67 67
#define P99__minus_minus_68 68
#define P99__minus_minus_69 69
#define P99__minus_minus_70 70
#define P99__minus_minus_71 71
#define P99__minus_minus_72 72
#define P99__minus_minus_73 73
#define P99__minus_minus_74 74
#define P99__minus_minus_75 75
#define P99__minus_minus_76 76
#define P99__minus_minus_77 77
#define P99__minus_minus_78 78
#define P99__minus_minus_79 79
#define P99__minus_minus_80 80
#define P99__minus_minus_81 81
#define P99__IS_0_GE_0 ,
#define P99__IS_1_GE_0 ,
#define P99__IS_2_GE_0 ,
#define P99__IS_3_GE_0 ,
#define P99__IS_4_GE_0 ,
#define P99__IS_5_GE_0 ,
#define P99__IS_6_GE_0 ,
#define P99__IS_7_GE_0 ,
#define P99__IS_8_GE_0 ,
#define P99__IS_9_GE_0 ,
#define P99__IS_10_GE_0 ,
#define P99__IS_11_GE_0 ,
#define P99__IS_12_GE_0 ,
#define P99__IS_13_GE_0 ,
#define P99__IS_14_GE_0 ,
#define P99__IS_15_GE_0 ,
#define P99__IS_16_GE_0 ,
#define P99__IS_17_GE_0 ,
#define P99__IS_18_GE_0 ,
#define P99__IS_19_GE_0 ,
#define P99__IS_20_GE_0 ,
#define P99__IS_21_GE_0 ,
#define P99__IS_22_GE_0 ,
#define P99__IS_23_GE_0 ,
#define P99__IS_24_GE_0 ,
#define P99__IS_25_GE_0 ,
#define P99__IS_26_GE_0 ,
#define P99__IS_27_GE_0 ,
#define P99__IS_28_GE_0 ,
#define P99__IS_29_GE_0 ,
#define P99__IS_30_GE_0 ,
#define P99__IS_31_GE_0 ,
#define P99__IS_32_GE_0 ,
#define P99__IS_33_GE_0 ,
#define P99__IS_34_GE_0 ,
#define P99__IS_35_GE_0 ,
#define P99__IS_36_GE_0 ,
#define P99__IS_37_GE_0 ,
#define P99__IS_38_GE_0 ,
#define P99__IS_39_GE_0 ,
#define P99__IS_40_GE_0 ,
#define P99__IS_41_GE_0 ,
#define P99__IS_42_GE_0 ,
#define P99__IS_43_GE_0 ,
#define P99__IS_44_GE_0 ,
#define P99__IS_45_GE_0 ,
#define P99__IS_46_GE_0 ,
#define P99__IS_47_GE_0 ,
#define P99__IS_48_GE_0 ,
#define P99__IS_49_GE_0 ,
#define P99__IS_50_GE_0 ,
#define P99__IS_51_GE_0 ,
#define P99__IS_52_GE_0 ,
#define P99__IS_53_GE_0 ,
#define P99__IS_54_GE_0 ,
#define P99__IS_55_GE_0 ,
#define P99__IS_56_GE_0 ,
#define P99__IS_57_GE_0 ,
#define P99__IS_58_GE_0 ,
#define P99__IS_59_GE_0 ,
#define P99__IS_60_GE_0 ,
#define P99__IS_61_GE_0 ,
#define P99__IS_62_GE_0 ,
#define P99__IS_63_GE_0 ,
#define P99__IS_64_GE_0 ,
#define P99__IS_65_GE_0 ,
#define P99__IS_66_GE_0 ,
#define P99__IS_67_GE_0 ,
#define P99__IS_68_GE_0 ,
#define P99__IS_69_GE_0 ,
#define P99__IS_70_GE_0 ,
#define P99__IS_71_GE_0 ,
#define P99__IS_72_GE_0 ,
#define P99__IS_73_GE_0 ,
#define P99__IS_74_GE_0 ,
#define P99__IS_75_GE_0 ,
#define P99__IS_76_GE_0 ,
#define P99__IS_77_GE_0 ,
#define P99__IS_78_GE_0 ,
#define P99__IS_79_GE_0 ,
#define P99__IS_80_GE_0 ,
#define P99__IS_81_GE_0 ,
#define P99__dec_eval_0 0
#define P99__dec_eval_1 1
#define P99__dec_eval_2 2
#define P99__dec_eval_3 3
#define P99__dec_eval_4 4
#define P99__dec_eval_5 5
#define P99__dec_eval_6 6
#define P99__dec_eval_7 7
#define P99__dec_eval_8 8
#define P99__dec_eval_9 9
#define P99__dec_eval_10 10
#define P99__dec_eval_11 11
#define P99__dec_eval_12 12
#define P99__dec_eval_13 13
#define P99__dec_eval_14 14
#define P99__dec_eval_15 15
#define P99__dec_eval_16 16
#define P99__dec_eval_17 17
#define P99__dec_eval_18 18
#define P99__dec_eval_19 19
#define P99__dec_eval_20 20
#define P99__dec_eval_21 21
#define P99__dec_eval_22 22
#define P99__dec_eval_23 23
#define P99__dec_eval_24 24
#define P99__dec_eval_25 25
#define P99__dec_eval_26 26
#define P99__dec_eval_27 27
#define P99__dec_eval_28 28
#define P99__dec_eval_29 29
#define P99__dec_eval_30 30
#define P99__dec_eval_31 31
#define P99__dec_eval_32 32
#define P99__dec_eval_33 33
#define P99__dec_eval_34 34
#define P99__dec_eval_35 35
#define P99__dec_eval_36 36
#define P99__dec_eval_37 37
#define P99__dec_eval_38 38
#define P99__dec_eval_39 39
#define P99__dec_eval_40 40
#define P99__dec_eval_41 41
#define P99__dec_eval_42 42
#define P99__dec_eval_43 43
#define P99__dec_eval_44 44
#define P99__dec_eval_45 45
#define P99__dec_eval_46 46
#define P99__dec_eval_47 47
#define P99__dec_eval_48 48
#define P99__dec_eval_49 49
#define P99__dec_eval_50 50
#define P99__dec_eval_51 51
#define P99__dec_eval_52 52
#define P99__dec_eval_53 53
#define P99__dec_eval_54 54
#define P99__dec_eval_55 55
#define P99__dec_eval_56 56
#define P99__dec_eval_57 57
#define P99__dec_eval_58 58
#define P99__dec_eval_59 59
#define P99__dec_eval_60 60
#define P99__dec_eval_61 61
#define P99__dec_eval_62 62
#define P99__dec_eval_63 63
#define P99__dec_eval_64 64
#define P99__dec_eval_65 65
#define P99__dec_eval_66 66
#define P99__dec_eval_67 67
#define P99__dec_eval_68 68
#define P99__dec_eval_69 69
#define P99__dec_eval_70 70
#define P99__dec_eval_71 71
#define P99__dec_eval_72 72
#define P99__dec_eval_73 73
#define P99__dec_eval_74 74
#define P99__dec_eval_75 75
#define P99__dec_eval_76 76
#define P99__dec_eval_77 77
#define P99__dec_eval_78 78
#define P99__dec_eval_79 79
#define P99__dec_eval_80 80
#define P99__dec_eval_81 81
#define P99__dec_eval_minus_0 0
#define P99__dec_eval_minus_1 -1
#define P99__dec_eval_minus_2 -2
#define P99__dec_eval_minus_3 -3
#define P99__dec_eval_minus_4 -4
#define P99__dec_eval_minus_5 -5
#define P99__dec_eval_minus_6 -6
#define P99__dec_eval_minus_7 -7
#define P99__dec_eval_minus_8 -8
#define P99__dec_eval_minus_9 -9
#define P99__dec_eval_minus_10 -10
#define P99__dec_eval_minus_11 -11
#define P99__dec_eval_minus_12 -12
#define P99__dec_eval_minus_13 -13
#define P99__dec_eval_minus_14 -14
#define P99__dec_eval_minus_15 -15
#define P99__dec_eval_minus_16 -16
#define P99__dec_eval_minus_17 -17
#define P99__dec_eval_minus_18 -18
#define P99__dec_eval_minus_19 -19
#define P99__dec_eval_minus_20 -20
#define P99__dec_eval_minus_21 -21
#define P99__dec_eval_minus_22 -22
#define P99__dec_eval_minus_23 -23
#define P99__dec_eval_minus_24 -24
#define P99__dec_eval_minus_25 -25
#define P99__dec_eval_minus_26 -26
#define P99__dec_eval_minus_27 -27
#define P99__dec_eval_minus_28 -28
#define P99__dec_eval_minus_29 -29
#define P99__dec_eval_minus_30 -30
#define P99__dec_eval_minus_31 -31
#define P99__dec_eval_minus_32 -32
#define P99__dec_eval_minus_33 -33
#define P99__dec_eval_minus_34 -34
#define P99__dec_eval_minus_35 -35
#define P99__dec_eval_minus_36 -36
#define P99__dec_eval_minus_37 -37
#define P99__dec_eval_minus_38 -38
#define P99__dec_eval_minus_39 -39
#define P99__dec_eval_minus_40 -40
#define P99__dec_eval_minus_41 -41
#define P99__dec_eval_minus_42 -42
#define P99__dec_eval_minus_43 -43
#define P99__dec_eval_minus_44 -44
#define P99__dec_eval_minus_45 -45
#define P99__dec_eval_minus_46 -46
#define P99__dec_eval_minus_47 -47
#define P99__dec_eval_minus_48 -48
#define P99__dec_eval_minus_49 -49
#define P99__dec_eval_minus_50 -50
#define P99__dec_eval_minus_51 -51
#define P99__dec_eval_minus_52 -52
#define P99__dec_eval_minus_53 -53
#define P99__dec_eval_minus_54 -54
#define P99__dec_eval_minus_55 -55
#define P99__dec_eval_minus_56 -56
#define P99__dec_eval_minus_57 -57
#define P99__dec_eval_minus_58 -58
#define P99__dec_eval_minus_59 -59
#define P99__dec_eval_minus_60 -60
#define P99__dec_eval_minus_61 -61
#define P99__dec_eval_minus_62 -62
#define P99__dec_eval_minus_63 -63
#define P99__dec_eval_minus_64 -64
#define P99__dec_eval_minus_65 -65
#define P99__dec_eval_minus_66 -66
#define P99__dec_eval_minus_67 -67
#define P99__dec_eval_minus_68 -68
#define P99__dec_eval_minus_69 -69
#define P99__dec_eval_minus_70 -70
#define P99__dec_eval_minus_71 -71
#define P99__dec_eval_minus_72 -72
#define P99__dec_eval_minus_73 -73
#define P99__dec_eval_minus_74 -74
#define P99__dec_eval_minus_75 -75
#define P99__dec_eval_minus_76 -76
#define P99__dec_eval_minus_77 -77
#define P99__dec_eval_minus_78 -78
#define P99__dec_eval_minus_79 -79
#define P99__dec_eval_minus_80 -80
#define P99__dec_eval_minus_81 -81
#define P99_DUPL2(...) __VA_ARGS__, P99_DUPL1(__VA_ARGS__)
#define P99_DUPL3(...) __VA_ARGS__, P99_DUPL2(__VA_ARGS__)
#define P99_DUPL4(...) __VA_ARGS__, P99_DUPL3(__VA_ARGS__)
#define P99_DUPL5(...) __VA_ARGS__, P99_DUPL4(__VA_ARGS__)
#define P99_DUPL6(...) __VA_ARGS__, P99_DUPL5(__VA_ARGS__)
#define P99_DUPL7(...) __VA_ARGS__, P99_DUPL6(__VA_ARGS__)
#define P99_DUPL8(...) __VA_ARGS__, P99_DUPL7(__VA_ARGS__)
#define P99_DUPL9(...) __VA_ARGS__, P99_DUPL8(__VA_ARGS__)
#define P99_DUPL10(...) __VA_ARGS__, P99_DUPL9(__VA_ARGS__)
#define P99_DUPL11(...) __VA_ARGS__, P99_DUPL10(__VA_ARGS__)
#define P99_DUPL12(...) __VA_ARGS__, P99_DUPL11(__VA_ARGS__)
#define P99_DUPL13(...) __VA_ARGS__, P99_DUPL12(__VA_ARGS__)
#define P99_DUPL14(...) __VA_ARGS__, P99_DUPL13(__VA_ARGS__)
#define P99_DUPL15(...) __VA_ARGS__, P99_DUPL14(__VA_ARGS__)
#define P99_DUPL16(...) __VA_ARGS__, P99_DUPL15(__VA_ARGS__)
#define P99_DUPL17(...) __VA_ARGS__, P99_DUPL16(__VA_ARGS__)
#define P99_DUPL18(...) __VA_ARGS__, P99_DUPL17(__VA_ARGS__)
#define P99_DUPL19(...) __VA_ARGS__, P99_DUPL18(__VA_ARGS__)
#define P99_DUPL20(...) __VA_ARGS__, P99_DUPL19(__VA_ARGS__)
#define P99_DUPL21(...) __VA_ARGS__, P99_DUPL20(__VA_ARGS__)
#define P99_DUPL22(...) __VA_ARGS__, P99_DUPL21(__VA_ARGS__)
#define P99_DUPL23(...) __VA_ARGS__, P99_DUPL22(__VA_ARGS__)
#define P99_DUPL24(...) __VA_ARGS__, P99_DUPL23(__VA_ARGS__)
#define P99_DUPL25(...) __VA_ARGS__, P99_DUPL24(__VA_ARGS__)
#define P99_DUPL26(...) __VA_ARGS__, P99_DUPL25(__VA_ARGS__)
#define P99_DUPL27(...) __VA_ARGS__, P99_DUPL26(__VA_ARGS__)
#define P99_DUPL28(...) __VA_ARGS__, P99_DUPL27(__VA_ARGS__)
#define P99_DUPL29(...) __VA_ARGS__, P99_DUPL28(__VA_ARGS__)
#define P99_DUPL30(...) __VA_ARGS__, P99_DUPL29(__VA_ARGS__)
#define P99_DUPL31(...) __VA_ARGS__, P99_DUPL30(__VA_ARGS__)
#define P99_DUPL32(...) __VA_ARGS__, P99_DUPL31(__VA_ARGS__)
#define P99_DUPL33(...) __VA_ARGS__, P99_DUPL32(__VA_ARGS__)
#define P99_DUPL34(...) __VA_ARGS__, P99_DUPL33(__VA_ARGS__)
#define P99_DUPL35(...) __VA_ARGS__, P99_DUPL34(__VA_ARGS__)
#define P99_DUPL36(...) __VA_ARGS__, P99_DUPL35(__VA_ARGS__)
#define P99_DUPL37(...) __VA_ARGS__, P99_DUPL36(__VA_ARGS__)
#define P99_DUPL38(...) __VA_ARGS__, P99_DUPL37(__VA_ARGS__)
#define P99_DUPL39(...) __VA_ARGS__, P99_DUPL38(__VA_ARGS__)
#define P99_DUPL40(...) __VA_ARGS__, P99_DUPL39(__VA_ARGS__)
#define P99_DUPL41(...) __VA_ARGS__, P99_DUPL40(__VA_ARGS__)
#define P99_DUPL42(...) __VA_ARGS__, P99_DUPL41(__VA_ARGS__)
#define P99_DUPL43(...) __VA_ARGS__, P99_DUPL42(__VA_ARGS__)
#define P99_DUPL44(...) __VA_ARGS__, P99_DUPL43(__VA_ARGS__)
#define P99_DUPL45(...) __VA_ARGS__, P99_DUPL44(__VA_ARGS__)
#define P99_DUPL46(...) __VA_ARGS__, P99_DUPL45(__VA_ARGS__)
#define P99_DUPL47(...) __VA_ARGS__, P99_DUPL46(__VA_ARGS__)
#define P99_DUPL48(...) __VA_ARGS__, P99_DUPL47(__VA_ARGS__)
#define P99_DUPL49(...) __VA_ARGS__, P99_DUPL48(__VA_ARGS__)
#define P99_DUPL50(...) __VA_ARGS__, P99_DUPL49(__VA_ARGS__)
#define P99_DUPL51(...) __VA_ARGS__, P99_DUPL50(__VA_ARGS__)
#define P99_DUPL52(...) __VA_ARGS__, P99_DUPL51(__VA_ARGS__)
#define P99_DUPL53(...) __VA_ARGS__, P99_DUPL52(__VA_ARGS__)
#define P99_DUPL54(...) __VA_ARGS__, P99_DUPL53(__VA_ARGS__)
#define P99_DUPL55(...) __VA_ARGS__, P99_DUPL54(__VA_ARGS__)
#define P99_DUPL56(...) __VA_ARGS__, P99_DUPL55(__VA_ARGS__)
#define P99_DUPL57(...) __VA_ARGS__, P99_DUPL56(__VA_ARGS__)
#define P99_DUPL58(...) __VA_ARGS__, P99_DUPL57(__VA_ARGS__)
#define P99_DUPL59(...) __VA_ARGS__, P99_DUPL58(__VA_ARGS__)
#define P99_DUPL60(...) __VA_ARGS__, P99_DUPL59(__VA_ARGS__)
#define P99_DUPL61(...) __VA_ARGS__, P99_DUPL60(__VA_ARGS__)
#define P99_DUPL62(...) __VA_ARGS__, P99_DUPL61(__VA_ARGS__)
#define P99_DUPL63(...) __VA_ARGS__, P99_DUPL62(__VA_ARGS__)
#define P99_DUPL64(...) __VA_ARGS__, P99_DUPL63(__VA_ARGS__)
#define P99_DUPL65(...) __VA_ARGS__, P99_DUPL64(__VA_ARGS__)
#define P99_DUPL66(...) __VA_ARGS__, P99_DUPL65(__VA_ARGS__)
#define P99_DUPL67(...) __VA_ARGS__, P99_DUPL66(__VA_ARGS__)
#define P99_DUPL68(...) __VA_ARGS__, P99_DUPL67(__VA_ARGS__)
#define P99_DUPL69(...) __VA_ARGS__, P99_DUPL68(__VA_ARGS__)
#define P99_DUPL70(...) __VA_ARGS__, P99_DUPL69(__VA_ARGS__)
#define P99_DUPL71(...) __VA_ARGS__, P99_DUPL70(__VA_ARGS__)
#define P99_DUPL72(...) __VA_ARGS__, P99_DUPL71(__VA_ARGS__)
#define P99_DUPL73(...) __VA_ARGS__, P99_DUPL72(__VA_ARGS__)
#define P99_DUPL74(...) __VA_ARGS__, P99_DUPL73(__VA_ARGS__)
#define P99_DUPL75(...) __VA_ARGS__, P99_DUPL74(__VA_ARGS__)
#define P99_DUPL76(...) __VA_ARGS__, P99_DUPL75(__VA_ARGS__)
#define P99_DUPL77(...) __VA_ARGS__, P99_DUPL76(__VA_ARGS__)
#define P99_DUPL78(...) __VA_ARGS__, P99_DUPL77(__VA_ARGS__)
#define P99_DUPL79(...) __VA_ARGS__, P99_DUPL78(__VA_ARGS__)
#define P99_DUPL80(...) __VA_ARGS__, P99_DUPL79(__VA_ARGS__)
#define P99_DUPL81(...) __VA_ARGS__, P99_DUPL80(__VA_ARGS__)
#define P99__FOR2(NAME, OP, FUNC, ...) \
	OP(NAME, 1, P99__FOR1(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 1))
#define P99__FOR3(NAME, OP, FUNC, ...) \
	OP(NAME, 2, P99__FOR2(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 2))
#define P99__FOR4(NAME, OP, FUNC, ...) \
	OP(NAME, 3, P99__FOR3(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 3))
#define P99__FOR5(NAME, OP, FUNC, ...) \
	OP(NAME, 4, P99__FOR4(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 4))
#define P99__FOR6(NAME, OP, FUNC, ...) \
	OP(NAME, 5, P99__FOR5(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 5))
#define P99__FOR7(NAME, OP, FUNC, ...) \
	OP(NAME, 6, P99__FOR6(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 6))
#define P99__FOR8(NAME, OP, FUNC, ...) \
	OP(NAME, 7, P99__FOR7(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 7))
#define P99__FOR9(NAME, OP, FUNC, ...) \
	OP(NAME, 8, P99__FOR8(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 8))
#define P99__FOR10(NAME, OP, FUNC, ...) \
	OP(NAME, 9, P99__FOR9(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 9))
#define P99__FOR11(NAME, OP, FUNC, ...) \
	OP(NAME, 10, P99__FOR10(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 10))
#define P99__FOR12(NAME, OP, FUNC, ...) \
	OP(NAME, 11, P99__FOR11(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 11))
#define P99__FOR13(NAME, OP, FUNC, ...) \
	OP(NAME, 12, P99__FOR12(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 12))
#define P99__FOR14(NAME, OP, FUNC, ...) \
	OP(NAME, 13, P99__FOR13(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 13))
#define P99__FOR15(NAME, OP, FUNC, ...) \
	OP(NAME, 14, P99__FOR14(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 14))
#define P99__FOR16(NAME, OP, FUNC, ...) \
	OP(NAME, 15, P99__FOR15(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 15))
#define P99__FOR17(NAME, OP, FUNC, ...) \
	OP(NAME, 16, P99__FOR16(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 16))
#define P99__FOR18(NAME, OP, FUNC, ...) \
	OP(NAME, 17, P99__FOR17(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 17))
#define P99__FOR19(NAME, OP, FUNC, ...) \
	OP(NAME, 18, P99__FOR18(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 18))
#define P99__FOR20(NAME, OP, FUNC, ...) \
	OP(NAME, 19, P99__FOR19(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 19))
#define P99__FOR21(NAME, OP, FUNC, ...) \
	OP(NAME, 20, P99__FOR20(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 20))
#define P99__FOR22(NAME, OP, FUNC, ...) \
	OP(NAME, 21, P99__FOR21(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 21))
#define P99__FOR23(NAME, OP, FUNC, ...) \
	OP(NAME, 22, P99__FOR22(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 22))
#define P99__FOR24(NAME, OP, FUNC, ...) \
	OP(NAME, 23, P99__FOR23(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 23))
#define P99__FOR25(NAME, OP, FUNC, ...) \
	OP(NAME, 24, P99__FOR24(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 24))
#define P99__FOR26(NAME, OP, FUNC, ...) \
	OP(NAME, 25, P99__FOR25(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 25))
#define P99__FOR27(NAME, OP, FUNC, ...) \
	OP(NAME, 26, P99__FOR26(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 26))
#define P99__FOR28(NAME, OP, FUNC, ...) \
	OP(NAME, 27, P99__FOR27(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 27))
#define P99__FOR29(NAME, OP, FUNC, ...) \
	OP(NAME, 28, P99__FOR28(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 28))
#define P99__FOR30(NAME, OP, FUNC, ...) \
	OP(NAME, 29, P99__FOR29(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 29))
#define P99__FOR31(NAME, OP, FUNC, ...) \
	OP(NAME, 30, P99__FOR30(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 30))
#define P99__FOR32(NAME, OP, FUNC, ...) \
	OP(NAME, 31, P99__FOR31(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 31))
#define P99__FOR33(NAME, OP, FUNC, ...) \
	OP(NAME, 32, P99__FOR32(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 32))
#define P99__FOR34(NAME, OP, FUNC, ...) \
	OP(NAME, 33, P99__FOR33(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 33))
#define P99__FOR35(NAME, OP, FUNC, ...) \
	OP(NAME, 34, P99__FOR34(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 34))
#define P99__FOR36(NAME, OP, FUNC, ...) \
	OP(NAME, 35, P99__FOR35(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 35))
#define P99__FOR37(NAME, OP, FUNC, ...) \
	OP(NAME, 36, P99__FOR36(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 36))
#define P99__FOR38(NAME, OP, FUNC, ...) \
	OP(NAME, 37, P99__FOR37(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 37))
#define P99__FOR39(NAME, OP, FUNC, ...) \
	OP(NAME, 38, P99__FOR38(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 38))
#define P99__FOR40(NAME, OP, FUNC, ...) \
	OP(NAME, 39, P99__FOR39(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 39))
#define P99__FOR41(NAME, OP, FUNC, ...) \
	OP(NAME, 40, P99__FOR40(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 40))
#define P99__FOR42(NAME, OP, FUNC, ...) \
	OP(NAME, 41, P99__FOR41(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 41))
#define P99__FOR43(NAME, OP, FUNC, ...) \
	OP(NAME, 42, P99__FOR42(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 42))
#define P99__FOR44(NAME, OP, FUNC, ...) \
	OP(NAME, 43, P99__FOR43(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 43))
#define P99__FOR45(NAME, OP, FUNC, ...) \
	OP(NAME, 44, P99__FOR44(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 44))
#define P99__FOR46(NAME, OP, FUNC, ...) \
	OP(NAME, 45, P99__FOR45(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 45))
#define P99__FOR47(NAME, OP, FUNC, ...) \
	OP(NAME, 46, P99__FOR46(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 46))
#define P99__FOR48(NAME, OP, FUNC, ...) \
	OP(NAME, 47, P99__FOR47(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 47))
#define P99__FOR49(NAME, OP, FUNC, ...) \
	OP(NAME, 48, P99__FOR48(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 48))
#define P99__FOR50(NAME, OP, FUNC, ...) \
	OP(NAME, 49, P99__FOR49(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 49))
#define P99__FOR51(NAME, OP, FUNC, ...) \
	OP(NAME, 50, P99__FOR50(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 50))
#define P99__FOR52(NAME, OP, FUNC, ...) \
	OP(NAME, 51, P99__FOR51(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 51))
#define P99__FOR53(NAME, OP, FUNC, ...) \
	OP(NAME, 52, P99__FOR52(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 52))
#define P99__FOR54(NAME, OP, FUNC, ...) \
	OP(NAME, 53, P99__FOR53(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 53))
#define P99__FOR55(NAME, OP, FUNC, ...) \
	OP(NAME, 54, P99__FOR54(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 54))
#define P99__FOR56(NAME, OP, FUNC, ...) \
	OP(NAME, 55, P99__FOR55(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 55))
#define P99__FOR57(NAME, OP, FUNC, ...) \
	OP(NAME, 56, P99__FOR56(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 56))
#define P99__FOR58(NAME, OP, FUNC, ...) \
	OP(NAME, 57, P99__FOR57(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 57))
#define P99__FOR59(NAME, OP, FUNC, ...) \
	OP(NAME, 58, P99__FOR58(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 58))
#define P99__FOR60(NAME, OP, FUNC, ...) \
	OP(NAME, 59, P99__FOR59(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 59))
#define P99__FOR61(NAME, OP, FUNC, ...) \
	OP(NAME, 60, P99__FOR60(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 60))
#define P99__FOR62(NAME, OP, FUNC, ...) \
	OP(NAME, 61, P99__FOR61(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 61))
#define P99__FOR63(NAME, OP, FUNC, ...) \
	OP(NAME, 62, P99__FOR62(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 62))
#define P99__FOR64(NAME, OP, FUNC, ...) \
	OP(NAME, 63, P99__FOR63(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 63))
#define P99__FOR65(NAME, OP, FUNC, ...) \
	OP(NAME, 64, P99__FOR64(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 64))
#define P99__FOR66(NAME, OP, FUNC, ...) \
	OP(NAME, 65, P99__FOR65(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 65))
#define P99__FOR67(NAME, OP, FUNC, ...) \
	OP(NAME, 66, P99__FOR66(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 66))
#define P99__FOR68(NAME, OP, FUNC, ...) \
	OP(NAME, 67, P99__FOR67(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 67))
#define P99__FOR69(NAME, OP, FUNC, ...) \
	OP(NAME, 68, P99__FOR68(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 68))
#define P99__FOR70(NAME, OP, FUNC, ...) \
	OP(NAME, 69, P99__FOR69(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 69))
#define P99__FOR71(NAME, OP, FUNC, ...) \
	OP(NAME, 70, P99__FOR70(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 70))
#define P99__FOR72(NAME, OP, FUNC, ...) \
	OP(NAME, 71, P99__FOR71(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 71))
#define P99__FOR73(NAME, OP, FUNC, ...) \
	OP(NAME, 72, P99__FOR72(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 72))
#define P99__FOR74(NAME, OP, FUNC, ...) \
	OP(NAME, 73, P99__FOR73(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 73))
#define P99__FOR75(NAME, OP, FUNC, ...) \
	OP(NAME, 74, P99__FOR74(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 74))
#define P99__FOR76(NAME, OP, FUNC, ...) \
	OP(NAME, 75, P99__FOR75(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 75))
#define P99__FOR77(NAME, OP, FUNC, ...) \
	OP(NAME, 76, P99__FOR76(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 76))
#define P99__FOR78(NAME, OP, FUNC, ...) \
	OP(NAME, 77, P99__FOR77(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 77))
#define P99__FOR79(NAME, OP, FUNC, ...) \
	OP(NAME, 78, P99__FOR78(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 78))
#define P99__FOR80(NAME, OP, FUNC, ...) \
	OP(NAME, 79, P99__FOR79(NAME, OP, FUNC, P99_ALLBUTLAST(__VA_ARGS__)), FUNC(NAME, P99_LAST(__VA_ARGS__), 79))
#define P99_HIGH2(X) \
 (((X)==UINTMAX_C(1))?0U:                                                                 \
  (((X)==UINTMAX_C(2))?1U:                                                                \
   (((X)==UINTMAX_C(4))?2U:                                                               \
    (((X)==UINTMAX_C(8))?3U:                                                              \
     (((X)==UINTMAX_C(16))?4U:                                                             \
      (((X)==UINTMAX_C(32))?5U:                                                            \
       (((X)==UINTMAX_C(64))?6U:                                                           \
        (((X)==UINTMAX_C(128))?7U:                                                          \
         (((X)==UINTMAX_C(256))?8U:                                                         \
          (((X)==UINTMAX_C(512))?9U:                                                        \
           (((X)==UINTMAX_C(1024))?10U:                                                       \
            (((X)==UINTMAX_C(2048))?11U:                                                      \
             (((X)==UINTMAX_C(4096))?12U:                                                     \
              (((X)==UINTMAX_C(8192))?13U:                                                    \
               (((X)==UINTMAX_C(16384))?14U:                                                   \
                (((X)==UINTMAX_C(32768))?15U:                                                  \
                 (((X)==UINTMAX_C(65536))?16U:                                                 \
                  (((X)==UINTMAX_C(131072))?17U:                                                \
                   (((X)==UINTMAX_C(262144))?18U:                                               \
                    (((X)==UINTMAX_C(524288))?19U:                                              \
                     (((X)==UINTMAX_C(1048576))?20U:                                             \
                      (((X)==UINTMAX_C(2097152))?21U:                                            \
                       (((X)==UINTMAX_C(4194304))?22U:                                           \
                        (((X)==UINTMAX_C(8388608))?23U:                                          \
                         (((X)==UINTMAX_C(16777216))?24U:                                         \
                          (((X)==UINTMAX_C(33554432))?25U:                                        \
                           (((X)==UINTMAX_C(67108864))?26U:                                       \
                            (((X)==UINTMAX_C(134217728))?27U:                                      \
                             (((X)==UINTMAX_C(268435456))?28U:                                     \
                              (((X)==UINTMAX_C(536870912))?29U:                                    \
                               (((X)==UINTMAX_C(1073741824))?30U:                                   \
                                (((X)==UINTMAX_C(2147483648))?31U:                                  \
                                 (((X)==UINTMAX_C(4294967296))?32U:                                 \
                                  (((X)==UINTMAX_C(8589934592))?33U:                                \
                                   (((X)==UINTMAX_C(17179869184))?34U:                               \
                                    (((X)==UINTMAX_C(34359738368))?35U:                              \
                                     (((X)==UINTMAX_C(68719476736))?36U:                             \
                                      (((X)==UINTMAX_C(137438953472))?37U:                            \
                                       (((X)==UINTMAX_C(274877906944))?38U:                           \
                                        (((X)==UINTMAX_C(549755813888))?39U:                          \
                                         (((X)==UINTMAX_C(1099511627776))?40U:                         \
                                          (((X)==UINTMAX_C(2199023255552))?41U:                        \
                                           (((X)==UINTMAX_C(4398046511104))?42U:                       \
                                            (((X)==UINTMAX_C(8796093022208))?43U:                      \
                                             (((X)==UINTMAX_C(17592186044416))?44U:                     \
                                              (((X)==UINTMAX_C(35184372088832))?45U:                    \
                                               (((X)==UINTMAX_C(70368744177664))?46U:                   \
                                                (((X)==UINTMAX_C(140737488355328))?47U:                  \
                                                 (((X)==UINTMAX_C(281474976710656))?48U:                 \
                                                  (((X)==UINTMAX_C(562949953421312))?49U:                \
                                                   (((X)==UINTMAX_C(1125899906842624))?50U:               \
                                                    (((X)==UINTMAX_C(2251799813685248))?51U:              \
                                                     (((X)==UINTMAX_C(4503599627370496))?52U:             \
                                                      (((X)==UINTMAX_C(9007199254740992))?53U:            \
                                                       (((X)==UINTMAX_C(18014398509481984))?54U:           \
                                                        (((X)==UINTMAX_C(36028797018963968))?55U:          \
                                                         (((X)==UINTMAX_C(72057594037927936))?56U:         \
                                                          (((X)==UINTMAX_C(144115188075855872))?57U:        \
                                                           (((X)==UINTMAX_C(288230376151711744))?58U:       \
                                                            (((X)==UINTMAX_C(576460752303423488))?59U:      \
                                                             (((X)==UINTMAX_C(1152921504606846976))?60U:     \
                                                              (((X)==UINTMAX_C(2305843009213693952))?61U:    \
                                                               (((X)==UINTMAX_C(4611686018427387904))?62U:   \
                                                                (((X)==UINTMAX_C(9223372036854775808))?63U:  \
 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define P99_HIGH2_1(X) \
 (((X)==UINTMAX_C(0))?0U:                                                                 \
  (((X)==UINTMAX_C(1))?1U:                                                                \
   (((X)==UINTMAX_C(3))?2U:                                                               \
    (((X)==UINTMAX_C(7))?3U:                                                              \
     (((X)==UINTMAX_C(15))?4U:                                                             \
      (((X)==UINTMAX_C(31))?5U:                                                            \
       (((X)==UINTMAX_C(63))?6U:                                                           \
        (((X)==UINTMAX_C(127))?7U:                                                          \
         (((X)==UINTMAX_C(255))?8U:                                                         \
          (((X)==UINTMAX_C(511))?9U:                                                        \
           (((X)==UINTMAX_C(1023))?10U:                                                       \
            (((X)==UINTMAX_C(2047))?11U:                                                      \
             (((X)==UINTMAX_C(4095))?12U:                                                     \
              (((X)==UINTMAX_C(8191))?13U:                                                    \
               (((X)==UINTMAX_C(16383))?14U:                                                   \
                (((X)==UINTMAX_C(32767))?15U:                                                  \
                 (((X)==UINTMAX_C(65535))?16U:                                                 \
                  (((X)==UINTMAX_C(131071))?17U:                                                \
                   (((X)==UINTMAX_C(262143))?18U:                                               \
                    (((X)==UINTMAX_C(524287))?19U:                                              \
                     (((X)==UINTMAX_C(1048575))?20U:                                             \
                      (((X)==UINTMAX_C(2097151))?21U:                                            \
                       (((X)==UINTMAX_C(4194303))?22U:                                           \
                        (((X)==UINTMAX_C(8388607))?23U:                                          \
                         (((X)==UINTMAX_C(16777215))?24U:                                         \
                          (((X)==UINTMAX_C(33554431))?25U:                                        \
                           (((X)==UINTMAX_C(67108863))?26U:                                       \
                            (((X)==UINTMAX_C(134217727))?27U:                                      \
                             (((X)==UINTMAX_C(268435455))?28U:                                     \
                              (((X)==UINTMAX_C(536870911))?29U:                                    \
                               (((X)==UINTMAX_C(1073741823))?30U:                                   \
                                (((X)==UINTMAX_C(2147483647))?31U:                                  \
                                 (((X)==UINTMAX_C(4294967295))?32U:                                 \
                                  (((X)==UINTMAX_C(8589934591))?33U:                                \
                                   (((X)==UINTMAX_C(17179869183))?34U:                               \
                                    (((X)==UINTMAX_C(34359738367))?35U:                              \
                                     (((X)==UINTMAX_C(68719476735))?36U:                             \
                                      (((X)==UINTMAX_C(137438953471))?37U:                            \
                                       (((X)==UINTMAX_C(274877906943))?38U:                           \
                                        (((X)==UINTMAX_C(549755813887))?39U:                          \
                                         (((X)==UINTMAX_C(1099511627775))?40U:                         \
                                          (((X)==UINTMAX_C(2199023255551))?41U:                        \
                                           (((X)==UINTMAX_C(4398046511103))?42U:                       \
                                            (((X)==UINTMAX_C(8796093022207))?43U:                      \
                                             (((X)==UINTMAX_C(17592186044415))?44U:                     \
                                              (((X)==UINTMAX_C(35184372088831))?45U:                    \
                                               (((X)==UINTMAX_C(70368744177663))?46U:                   \
                                                (((X)==UINTMAX_C(140737488355327))?47U:                  \
                                                 (((X)==UINTMAX_C(281474976710655))?48U:                 \
                                                  (((X)==UINTMAX_C(562949953421311))?49U:                \
                                                   (((X)==UINTMAX_C(1125899906842623))?50U:               \
                                                    (((X)==UINTMAX_C(2251799813685247))?51U:              \
                                                     (((X)==UINTMAX_C(4503599627370495))?52U:             \
                                                      (((X)==UINTMAX_C(9007199254740991))?53U:            \
                                                       (((X)==UINTMAX_C(18014398509481983))?54U:           \
                                                        (((X)==UINTMAX_C(36028797018963967))?55U:          \
                                                         (((X)==UINTMAX_C(72057594037927935))?56U:         \
                                                          (((X)==UINTMAX_C(144115188075855871))?57U:        \
                                                           (((X)==UINTMAX_C(288230376151711743))?58U:       \
                                                            (((X)==UINTMAX_C(576460752303423487))?59U:      \
                                                             (((X)==UINTMAX_C(1152921504606846975))?60U:     \
                                                              (((X)==UINTMAX_C(2305843009213693951))?61U:    \
                                                               (((X)==UINTMAX_C(4611686018427387903))?62U:   \
                                                                (((X)==UINTMAX_C(9223372036854775807))?63U:  \
                                                                 (((X)==UINTMAX_C(18446744073709551615))?64U: \
 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

//! @addtogroup preprocessor_macros
//! @{


#define P99__preprocessor_macros

//! @addtogroup meta_programming
//! @{


#define P99__meta_programming

//! @addtogroup preprocessor_conditionals
//! @{


#define P99__preprocessor_conditionals

//! @}

//! @addtogroup preprocessor_for
//! @{


#define P99__preprocessor_for

//! @}

//! @addtogroup preprocessor_blocks
//! @{


#define P99__preprocessor_blocks

//! @}

//! @}

//! @addtogroup list_processing
//! @{


#define P99__list_processing

//! @addtogroup basic_list_operations
//! @{


#define P99__basic_list_operations

//! @}

//! @addtogroup statement_lists
//! @{


#define P99__statement_lists

//! @}

//! @}

//! @addtogroup preprocessor_operators
//! @{


#define P99__preprocessor_operators

//! @addtogroup preprocessor_logic
//! @{


#define P99__preprocessor_logic

//! @}

//! @addtogroup preprocessor_arithmetic
//! @{


#define P99__preprocessor_arithmetic

//! @}

//! @addtogroup preprocessor_text
//! @{


#define P99__preprocessor_text

//! @}

//! @}

//! @addtogroup code_augmenting
//! @{


#define P99__code_augmenting

//! @addtogroup preprocessor_allocation
//! @{


#define P99__preprocessor_allocation

//! @}

//! @addtogroup preprocessor_initialization
//! @{


#define P99__preprocessor_initialization

//! @}

//! @addtogroup default_arguments
//! @{


#define P99__default_arguments

//! @}

//! @addtogroup variadic
//! @{


#define P99__variadic

//! @}

//! @}

//! @}
