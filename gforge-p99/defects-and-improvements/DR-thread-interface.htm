<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>Defect report #4nn</title>
<style>
.quote {
    background-color : #FFD;
    text-align : left;
    margin : 0em 2em;
}
.alternative {
    background-color : #FCC;
    text-align : left;
    margin : 0em 2em;
}
pre {
    background-color : #EEE;
    text-style : sans-serif;
    margin : 0em 2em;
}
code { background-color : #EEE; text-style : sans-serif }
</style>
</head>
<body>
<h2>Defect report #4nn</h2><a href=
  "dr_4aa.htm">Previous Defect Report</a> &lt; - &gt; <a href=
  "dr_4bb.htm">Next Defect Report</a>

  <p><br>
  <b>Submitter:</b> Jens Gustedt<br>
  <b>Submission Date:</b> <br>
  <!-- yyyy-mm-dd -->
  2012-10-08
   <b>Source:</b><br>
  <b>Reference Document:</b> N/A<br>
  <b>Version:</b> 1.0<br>
  <b>Date:</b> 2012-10-08<br>
  <b>Subject:</b> collection of various underspecification defects in
  the thread interfaces</p>

  <p><b>Summary</b></p>

<p>
  The thread interfaces as they are declared in
  the <code>threads.h</code> header are largely underspecified, such
  that interpreting them is often just guess work and leaves room for
  a wide range of interpretations. In the following I only give an
  incomplete list of the defects as I noticed them, I suspect that
  there might be a lot of others.
</p>

  <p><b>List of defects</b></p>

  <ol>
    <li>
      It is not defined what the <em>thread's result code</em> would
      be. Suggestion: the value returned by the thread function or the
      value passed to <code>thrd_exit</code>.
    </li>
    <li>
      Executing a thread function through <code>thrd_create</code> is
      not equivalent to calling that function.  Specify that
      terminating a thread function without a <code>return</code>
      or <code>thrd_exit</code> is undefined behavior
      (exception <code>main</code>).
    </li>
    <li>
      Unspecified language for some of the functions. What does "could
      not be honored" mean compared to "unsuccessful"? This concerns
      in particular the "signalling" functions. Is a call
      to <code>cnd_signal</code> for which there is no waiter
      "honoured"?
    </li>
    <li>
      The relation that is established between a <code>mtx_t</code>
      and <code>cnd_t</code> is not well specified.
      <ol>
        <li>May several condition variables concurrently be used with
          the same mutex?  (suggestion: yes)
        </li>
        <li>May a condition variable be used concurrently with
          different mutexes?  (suggestion: no)
        </li>
        <li>
          The text suggests that a thread returning from a call
          to <code>cnd_wait</code> or <code>cnd_timedwait</code> will
          have regained the lock on the mutex. What happens if "the
          call could not be honored"? Is there a guarantee that in
          such case of failure no other thread had been granted in the
          mean time? What are the permitted cases of failure of these
          calls?
        </li>
      </ol>
    </li>
    <li>
      Is there such a thing like "spurious wakeups" on conditions?
      (Suggestion: yes, otherwise an implementation that would be
      compatible with POSIX would almost be impossible.)
    </li>
    <li>
      The initialzation of <code>once_flag</code> doesn't seem to be
      mandatory? Can such objects be of automatic storage duration?
    </li>
  </ol>


<p><b>Suggested Technical Corrigendum</b><br></p>

<p>
  The syntactic specification as it is given in the current version of
  the standard is suitable, with only some exceptions. (See the
  corresponding DR that aims to change the interfaces with no return.)
</p>

<p>
  The semantic specification is in many cases insufficient, such that
  it lacks the major goal of this whole thread interface, namely to
  provide a portable framework for threads. Since a more precise
  specification here would finally allow certain platforms to provide
  unambiguously conforming implementations as thin wrappers on top of
  their native thread models, a corrigendum for these aspects would
  widen the potential use of the (optional) thread interface.
</p>

<p>
  As a solution to this major problem with the thread interface, I
  propose to rewrite large parts of the descriptive text, by getting
  it in sync with the existing widely accepted standard for threads,
  namely POSIX threads. Being binary compatible with POSIX threads is
  a imperative for implementations of C11 threads on POSIX platforms.
</p>

<p>
  Other platforms that are less formalized than POSIX have there own
  technical restrictions that should additionally be taken into
  account.
</p>

<hr />
  <!-- Entires below the line by WG14 only. -->

  <p><br>
  <a href="dr_4aa.htm">Previous Defect Report</a> &lt; - &gt;
  <a href="dr_4bb.htm">Next Defect Report</a></p>
</body>
